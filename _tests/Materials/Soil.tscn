[gd_scene load_steps=8 format=2]

[ext_resource path="res://image_textures/Regolith_test_diffuse2.png" type="Texture" id=1]
[ext_resource path="res://image_textures/Regolith_test_diffuse1.png" type="Texture" id=2]
[ext_resource path="res://image_textures/water_normal_2.png" type="Texture" id=3]
[ext_resource path="res://image_textures/Regolith_test_normal2.png" type="Texture" id=4]

[sub_resource type="SphereMesh" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,world_vertex_coords;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_detail_albedo : hint_albedo;
uniform sampler2D texture_detail_normal : hint_normal;
uniform sampler2D texture_detail_mask : hint_white;
uniform float subsurface_scattering_strength : hint_range(0,1);
uniform sampler2D texture_subsurface_scattering : hint_white;
varying vec3 uv1_triplanar_pos;
varying vec3 uv2_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform float uv2_blend_sharpness;
varying vec3 uv2_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	uv2_power_normal=pow(abs(NORMAL), vec3(uv2_blend_sharpness));
	uv2_power_normal/=dot(uv2_power_normal,vec3(1.0));
	uv2_triplanar_pos = VERTEX * uv2_scale + uv2_offset;
	uv2_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec2 base_uv2 = UV2;
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMALMAP_DEPTH = normal_scale;
	float sss_tex = triplanar_texture(texture_subsurface_scattering,uv1_power_normal,uv1_triplanar_pos).r;
	SSS_STRENGTH=subsurface_scattering_strength*sss_tex;
	vec4 detail_tex = triplanar_texture(texture_detail_albedo,uv2_power_normal,uv2_triplanar_pos);
	vec4 detail_norm_tex = triplanar_texture(texture_detail_normal,uv2_power_normal,uv2_triplanar_pos);
	vec4 detail_mask_tex = triplanar_texture(texture_detail_mask,uv1_power_normal,uv1_triplanar_pos);
	vec3 detail = mix(ALBEDO.rgb,ALBEDO.rgb-detail_tex.rgb,detail_tex.a);
	
	vec3 detail_norm = mix(NORMALMAP,detail_norm_tex.rgb,detail_tex.a);
	vec3 normal_combined = (detail_norm + NORMALMAP)/dot(detail_norm,NORMALMAP);
	//NORMALMAP = mix(NORMALMAP,detail_norm,detail_mask_tex.r);
	NORMALMAP = normal_combined;
	ALBEDO.rgb = mix(ALBEDO.rgb,detail,detail_mask_tex.r);
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.31
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 0.75
shader_param/subsurface_scattering_strength = 0.65
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv2_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 0.5, 0.5, 0.5 )
shader_param/uv1_offset = Vector3( 0, -0.1, 0 )
shader_param/uv2_scale = Vector3( 0.2, 0.2, 0.2 )
shader_param/uv2_offset = Vector3( 0.5, 0.2, 0 )
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_normal = ExtResource( 4 )
shader_param/texture_detail_albedo = ExtResource( 2 )
shader_param/texture_detail_normal = ExtResource( 3 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( -52.7249, 0, 0, 0, -52.7249, 0, 0, 0, -52.7249, 0, 0, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 3 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.470777, 0.882252, 0, -0.882252, 0.470777, 0, 0, 0 )
