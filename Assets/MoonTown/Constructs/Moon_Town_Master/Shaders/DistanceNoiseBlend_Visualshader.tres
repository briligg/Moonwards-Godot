[gd_resource type="VisualShader" load_steps=81 format=2]

[ext_resource path="res://Assets/SharedAssets/Shaders/StochasticTextureNode.gd" type="Script" id=1]
[ext_resource path="res://Assets/SharedAssets/Shaders/NormalMultiplyNode.gd" type="Script" id=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
uniform_name = "Albedo_A"

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
uniform_name = "Albedo_Far"

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "Color_A"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "Color_Far"

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=9]

[sub_resource type="VisualShaderNodeTextureUniform" id=10]
uniform_name = "Rough_AO_A"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
uniform_name = "Rough_AO_Far"
texture_type = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=12]

[sub_resource type="VisualShaderNodeScalarInterp" id=13]

[sub_resource type="VisualShaderNodeScalarInterp" id=14]

[sub_resource type="VisualShaderNodeExpression" id=15]
size = Vector2( 555, 257 )
expression = "//Get distance to camera based on vertex
DistanceFinal = clamp(smoothstep(Distance_min, Distance_max, -Vertex.z), 0.0, 1.0);"

[sub_resource type="VisualShaderNodeTextureUniform" id=16]
uniform_name = "NormalMap_A"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=17]
uniform_name = "NormalMap_Far"
texture_type = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=18]

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
uniform_name = "Normal_Int"

[sub_resource type="VisualShaderNodeScalarUniform" id=20]
uniform_name = "Normal_Far_Int"

[sub_resource type="VisualShaderNodeTextureUniform" id=21]
uniform_name = "NormalMap_B"
texture_type = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=22]
uniform_name = "DistanceLerp"

[sub_resource type="VisualShaderNodeVectorInterp" id=23]

[sub_resource type="VisualShaderNodeScalarSwitch" id=24]

[sub_resource type="VisualShaderNodeTextureUniform" id=25]
uniform_name = "Rough_AO_B"
texture_type = 1

[sub_resource type="VisualShaderNodeVec3Uniform" id=26]
uniform_name = "Rough_AO_Far_Int"

[sub_resource type="VisualShaderNodeVec3Uniform" id=27]
uniform_name = "Rough_AO_Int"

[sub_resource type="VisualShaderNodeVectorOp" id=28]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=29]
uniform_name = "DistanceSmooth"

[sub_resource type="VisualShaderNodeVectorOp" id=30]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=31]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=32]

[sub_resource type="VisualShaderNodeVectorInterp" id=33]

[sub_resource type="VisualShaderNodeVec3Uniform" id=34]
uniform_name = "Metallic_A_B_Far"

[sub_resource type="VisualShaderNodeVec3Uniform" id=35]
uniform_name = "Specular_A_B_Far"

[sub_resource type="VisualShaderNodeVectorDecompose" id=36]

[sub_resource type="VisualShaderNodeVectorDecompose" id=37]

[sub_resource type="VisualShaderNodeScalarInterp" id=38]

[sub_resource type="VisualShaderNodeScalarInterp" id=39]

[sub_resource type="VisualShaderNodeInput" id=40]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVec3Uniform" id=41]
uniform_name = "UVScale_B"

[sub_resource type="VisualShaderNodeVectorOp" id=42]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=43]
uniform_name = "Albedo_B"

[sub_resource type="VisualShaderNodeColorUniform" id=44]
uniform_name = "Color_B"

[sub_resource type="VisualShaderNodeVectorOp" id=45]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=46]

[sub_resource type="VisualShaderNodeInput" id=47]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Uniform" id=48]
uniform_name = "UVScale_Noise"

[sub_resource type="VisualShaderNodeBooleanUniform" id=49]
uniform_name = "NoiseInvert"

[sub_resource type="VisualShaderNodeScalarUniform" id=50]
uniform_name = "NoiseIntensity"

[sub_resource type="VisualShaderNodeInput" id=51]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarClamp" id=52]

[sub_resource type="VisualShaderNodeScalarOp" id=53]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=54]
function = 31

[sub_resource type="VisualShaderNodeScalarSwitch" id=55]

[sub_resource type="VisualShaderNodeScalarSwitch" id=56]

[sub_resource type="VisualShaderNodeScalarSwitch" id=57]

[sub_resource type="VisualShaderNodeBooleanUniform" id=58]
uniform_name = "NoiseAlpha"

[sub_resource type="VisualShaderNodeBooleanUniform" id=59]
uniform_name = "NoiseZ"

[sub_resource type="VisualShaderNodeBooleanUniform" id=60]
uniform_name = "NoiseY"

[sub_resource type="VisualShaderNodeVectorDecompose" id=61]

[sub_resource type="VisualShaderNodeVec3Uniform" id=62]
uniform_name = "UVScale_A"

[sub_resource type="VisualShaderNodeTextureUniform" id=63]
uniform_name = "Noise_RGB"

[sub_resource type="VisualShaderNodeVectorOp" id=64]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=65]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=66]
operator = 3

[sub_resource type="VisualShaderNodeScalarConstant" id=67]
constant = 2.0

[sub_resource type="VisualShaderNodeVectorScalarMix" id=68]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.7 ]

[sub_resource type="VisualShaderNodeCustom" id=69]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=70]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=71]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVec3Uniform" id=72]
uniform_name = "UVScale_Far"

[sub_resource type="VisualShaderNodeCustom" id=73]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=74]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=75]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=76]
default_input_values = [ 0, Vector3( 0.5, 0.5, 1 ), 1, 1.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeCustom" id=77]
default_input_values = [ 0, Vector3( 0.5, 0.5, 1 ), 1, 1.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeCustom" id=78]
default_input_values = [ 0, Vector3( 0.5, 0.5, 1 ), 1, 1.0 ]
script = ExtResource( 2 )

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec4 Color_A : hint_color;
uniform vec3 UVScale_A;
uniform sampler2D Albedo_A;
uniform vec3 UVScale_B;
uniform sampler2D Albedo_B;
uniform vec4 Color_B : hint_color;
uniform bool NoiseInvert;
uniform float NoiseIntensity;
uniform bool NoiseAlpha;
uniform bool NoiseZ;
uniform vec3 UVScale_Noise;
uniform sampler2D Noise_RGB;
uniform bool NoiseY;
uniform vec3 UVScale_Far;
uniform sampler2D Albedo_Far;
uniform vec4 Color_Far : hint_color;
uniform float DistanceLerp;
uniform float DistanceSmooth;
uniform vec3 Metallic_A_B_Far;
uniform sampler2D Rough_AO_A : hint_albedo;
uniform vec3 Rough_AO_Int;
uniform sampler2D Rough_AO_B : hint_albedo;
uniform sampler2D Rough_AO_Far : hint_albedo;
uniform vec3 Rough_AO_Far_Int;
uniform vec3 Specular_A_B_Far;
uniform sampler2D NormalMap_A : hint_normal;
uniform float Normal_Int;
uniform sampler2D NormalMap_B : hint_normal;
uniform sampler2D NormalMap_Far : hint_normal;
uniform float Normal_Far_Int;


// StochasticTexture

void TriangleGrid ( vec2 uv ,
out float w1 , out float w2 , out float w3 ,
out vec2 vertex1 , out vec2 vertex2 , out vec2 vertex3 )
{
// Scaling of the input
uv *= 3.464; // 2 * sqrt (3)
// Skew input space into simplex triangle grid
const mat2 gridToSkewedGrid = mat2 (vec2(1.0 , 0.0) , vec2(-0.57735027 , 1.15470054)) ;
vec2 skewedCoord = gridToSkewedGrid * uv ;
// Compute local triangle vertex IDs and local barycentric coordinates
ivec2 baseId = ivec2 ( floor ( skewedCoord ));
vec3 temp = vec3 ( fract ( skewedCoord ) , 0) ;
temp .z = 1.0 - temp . x - temp .y;
if ( temp . z > 0.0)
{
w1 = temp .z;
w2 = temp .y;
w3 = temp .x;
vertex1 = vec2(float(baseId.x), float(baseId.y)) ;
vertex2 = vertex1 + vec2 (0 , 1) ;
vertex3 = vertex1 + vec2 (1 , 0) ;
}
else
{
w1 = - temp .z ;
w2 = 1.0 - temp .y;
w3 = 1.0 - temp .x;
vertex1 = vec2(float(baseId.x), float(baseId.y)) + vec2 (1 , 1) ;
vertex2 = vec2(float(baseId.x), float(baseId.y)) + vec2 (1 , 0) ;
vertex3 = vec2(float(baseId.x), float(baseId.y)) + vec2 (0 , 1) ;
}
}
vec2 hash2D2D (vec2 s)
{
	//magic numbers
	return fract(sin(mod(vec2(dot(s, vec2(127.1,311.7)), dot(s, vec2(269.5,183.3))), 3.14159))*43758.5453);
}

vec3 ProceduralTilingAndBlending (sampler2D input,   vec2 uv )
{
// Get triangle info
float w1 , w2 , w3 ;
vec2 vertex1 , vertex2 , vertex3 ;
TriangleGrid (uv , w1 , w2 , w3 , vertex1 , vertex2 , vertex3 );
// Assign random offset to each triangle vertex
vec2 uv1 = uv + hash2D2D ( vertex1 );
vec2 uv2 = uv + hash2D2D ( vertex2 );
vec2 uv3 = uv + hash2D2D ( vertex3 );
// Precompute UV derivatives
vec2 duvdx = dFdx ( uv ) ;
vec2 duvdy = dFdy ( uv ) ;
// Fetch input
vec3 I1 = textureGrad ( input , uv1 , duvdx , duvdy ). rgb ;
vec3 I2 = textureGrad ( input , uv2 , duvdx , duvdy ). rgb ;
vec3 I3 = textureGrad ( input , uv3 , duvdx , duvdy ). rgb ;
// Variance - preserving blending
vec3 G;
vec3 I = w1 * I1 + w2 * I2 + w3 * I3 ;
G = I - vec3 (0.5) ;
G = G * inversesqrt ( w1 * w1 + w2 * w2 + w3 * w3 ) ;
G = G + vec3 (0.5) ;
vec3 grayXfer = vec3(0.3, 0.59, 0.11);
vec3 gray = vec3(dot(grayXfer, G));
G = mix(G, gray, 0.5);

return mix(I,G,0.4);
}
 
//stochastic sampling
vec4 textureStochastic(sampler2D tex, vec2 uv)
{
	//triangle vertices and blend weights
	//BW_vx[0...2].xyz = triangle verts
	//BW_vx[3].xy = blend weights (z is unused)
	mat4 BW_vx;
 
	//uv transformed into triangular grid space with UV scaled by approximation of 2*sqrt(3)
	vec2 newUV = (mat2(vec2(1.0 , 0.0) , vec2(-0.57735027 , 1.15470054))* uv * 3.464);
 
	//vertex IDs and barycentric coords
	vec2 vxID = vec2 (floor(newUV));
	vec3 fracted = vec3 (fract(newUV), 0);
	fracted.z = 1.0-fracted.x-fracted.y;
 
	BW_vx = ((fracted.z>0.0) ?
		mat4(vec4(vxID, 0,0), vec4(vxID + vec2(0, 1), 0,0), vec4(vxID + vec2(1, 0), 0,0), vec4(fracted,0)) :
		mat4(vec4(vxID + vec2 (1, 1), 0,0), vec4(vxID + vec2 (1, 0), 0,0), vec4(vxID + vec2 (0, 1), 0,0), vec4(-fracted.z, 1.0-fracted.y, 1.0-fracted.x,0)));
 
	//calculate derivatives to avoid triangular grid artifacts
	vec2 dx = dFdx(uv);
	vec2 dy = dFdy(uv);

	//blend samples with calculated weights
	return (textureGrad(tex, uv + hash2D2D(BW_vx[0].xy), dx, dy) * BW_vx[3].x +
		   textureGrad(tex, uv + hash2D2D(BW_vx[1].xy), dx, dy) * BW_vx[3].y +
		   textureGrad(tex, uv + hash2D2D(BW_vx[2].xy), dx, dy) * BW_vx[3].z);
	
}
vec3 STexComplexB(sampler2D input, vec3 uv){
	vec4 tex = vec4(ProceduralTilingAndBlending(input, uv.xy),1);
	tex = mix(tex, textureStochastic(input, uv.xy), 0.4);
	return tex.rgb;
}

// NormalMultiply

vec3 NormalMultFunc(vec3 _Normal, float _Amount){
	return vec3(_Normal.x * _Amount, _Normal.y * _Amount, 1.0);
}


void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:14
	vec3 n_out14p0 = Color_A.rgb;
	float n_out14p1 = Color_A.a;

// Input:7
	vec3 n_out7p0 = vec3(UV, 0.0);

// VectorUniform:8
	vec3 n_out8p0 = UVScale_A;

// VectorOp:10
	vec3 n_out10p0 = n_out7p0 * n_out8p0;

// TextureUniform:12
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 n_tex_read = texture(Albedo_A, n_out10p0.xy);
		n_out12p0 = n_tex_read.rgb;
		n_out12p1 = n_tex_read.a;
	}

// StochasticTexture:87
	vec3 n_out87p0;
	{
		n_out87p0 = STexComplexB(Albedo_A,n_out10p0);
	}

// VectorOp:16
	vec3 n_out16p0 = n_out14p0 * n_out87p0;

// VectorUniform:60
	vec3 n_out60p0 = UVScale_B;

// VectorOp:61
	vec3 n_out61p0 = n_out7p0 * n_out60p0;

// TextureUniform:62
	vec3 n_out62p0;
	float n_out62p1;
	{
		vec4 n_tex_read = texture(Albedo_B, n_out61p0.xy);
		n_out62p0 = n_tex_read.rgb;
		n_out62p1 = n_tex_read.a;
	}

// StochasticTexture:88
	vec3 n_out88p0;
	{
		n_out88p0 = STexComplexB(Albedo_B,n_out61p0);
	}

// ColorUniform:63
	vec3 n_out63p0 = Color_B.rgb;
	float n_out63p1 = Color_B.a;

// VectorOp:64
	vec3 n_out64p0 = n_out88p0 * n_out63p0;

// BooleanUniform:68
	bool n_out68p0 = NoiseInvert;

// ScalarUniform:69
	float n_out69p0 = NoiseIntensity;

// BooleanUniform:76
	bool n_out76p0 = NoiseAlpha;

// BooleanUniform:77
	bool n_out77p0 = NoiseZ;

// Input:66
	vec3 n_out66p0 = vec3(UV, 0.0);

// VectorUniform:67
	vec3 n_out67p0 = UVScale_Noise;

// VectorOp:81
	vec3 n_out81p0 = n_out66p0 * n_out67p0;

// TextureUniform:80
	vec3 n_out80p0;
	float n_out80p1;
	{
		vec4 n_tex_read = texture(Noise_RGB, n_out81p0.xy);
		n_out80p0 = n_tex_read.rgb;
		n_out80p1 = n_tex_read.a;
	}

// VectorDecompose:79
	float n_out79p0 = n_out80p0.x;
	float n_out79p1 = n_out80p0.y;
	float n_out79p2 = n_out80p0.z;

// ScalarSwitch:75
	float n_out75p0;
	if(n_out77p0)
	{
		n_out75p0 = n_out80p1;
	}
	else
	{
		n_out75p0 = n_out79p2;
	}

// BooleanUniform:78
	bool n_out78p0 = NoiseY;

// ScalarSwitch:74
	float n_out74p0;
	if(n_out78p0)
	{
		n_out74p0 = n_out79p1;
	}
	else
	{
		n_out74p0 = n_out79p0;
	}

// ScalarSwitch:73
	float n_out73p0;
	if(n_out76p0)
	{
		n_out73p0 = n_out75p0;
	}
	else
	{
		n_out73p0 = n_out74p0;
	}

// ScalarOp:71
	float n_out71p0 = n_out69p0 * n_out73p0;

// ScalarClamp:70
	float n_in70p1 = 0.00000;
	float n_in70p2 = 1.00000;
	float n_out70p0 = clamp(n_out71p0, n_in70p1, n_in70p2);

// ScalarFunc:72
	float n_out72p0 = 1.0 - n_out70p0;

// ScalarSwitch:43
	float n_out43p0;
	if(n_out68p0)
	{
		n_out43p0 = n_out72p0;
	}
	else
	{
		n_out43p0 = n_out70p0;
	}

// VectorMix:65
	vec3 n_out65p0 = mix(n_out16p0, n_out64p0, vec3(n_out43p0));

// VectorUniform:9
	vec3 n_out9p0 = UVScale_Far;

// VectorOp:11
	vec3 n_out11p0 = n_out7p0 * n_out9p0;

// TextureUniform:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 n_tex_read = texture(Albedo_Far, n_out11p0.xy);
		n_out13p0 = n_tex_read.rgb;
		n_out13p1 = n_tex_read.a;
	}

// ColorUniform:15
	vec3 n_out15p0 = Color_Far.rgb;
	float n_out15p1 = Color_Far.a;

// VectorOp:17
	vec3 n_out17p0 = n_out13p0 * n_out15p0;

// Scalar:84
	float n_out84p0 = 2.000000;

// VectorOp:83
	vec3 n_out83p0 = n_out17p0 / vec3(n_out84p0);

// VectorScalarMix:86
	float n_in86p2 = 0.70000;
	vec3 n_out86p0 = mix(n_out65p0, n_out83p0, n_in86p2);

// Input:6
	vec3 n_out6p0 = VERTEX;

// ScalarUniform:4
	float n_out4p0 = DistanceLerp;

// ScalarUniform:5
	float n_out5p0 = DistanceSmooth;

// Expression:3
	float n_out3p0;
	n_out3p0 = 0.0;
	{
		//Get distance to camera based on vertex
		n_out3p0 = clamp(smoothstep(n_out5p0, n_out4p0, -n_out6p0.z), 0.0, 1.0);
	}

// VectorMix:18
	vec3 n_out18p0 = mix(n_out86p0, n_out17p0, vec3(n_out3p0));

// VectorUniform:54
	vec3 n_out54p0 = Metallic_A_B_Far;

// VectorDecompose:56
	float n_out56p0 = n_out54p0.x;
	float n_out56p1 = n_out54p0.y;
	float n_out56p2 = n_out54p0.z;

// ScalarMix:58
	float n_out58p0 = mix(n_out56p0, n_out56p1, n_out43p0);

// ScalarMix:25
	float n_out25p0 = mix(n_out58p0, n_out56p2, n_out3p0);

// TextureUniform:20
	vec3 n_out20p0;
	float n_out20p1;
	{
		vec4 n_tex_read = texture(Rough_AO_A, n_out10p0.xy);
		n_out20p0 = n_tex_read.rgb;
		n_out20p1 = n_tex_read.a;
	}

// StochasticTexture:89
	vec3 n_out89p0;
	{
		n_out89p0 = STexComplexB(Rough_AO_A,n_out10p0);
	}

// VectorUniform:48
	vec3 n_out48p0 = Rough_AO_Int;

// VectorOp:51
	vec3 n_out51p0 = n_out89p0 * n_out48p0;

// TextureUniform:45
	vec3 n_out45p0;
	float n_out45p1;
	{
		vec4 n_tex_read = texture(Rough_AO_B, n_out61p0.xy);
		n_out45p0 = n_tex_read.rgb;
		n_out45p1 = n_tex_read.a;
	}

// StochasticTexture:90
	vec3 n_out90p0;
	{
		n_out90p0 = STexComplexB(Rough_AO_B,n_out61p0);
	}

// VectorOp:50
	vec3 n_out50p0 = n_out90p0 * n_out48p0;

// VectorMix:52
	vec3 n_out52p0 = mix(n_out51p0, n_out50p0, vec3(n_out43p0));

// TextureUniform:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 n_tex_read = texture(Rough_AO_Far, n_out11p0.xy);
		n_out21p0 = n_tex_read.rgb;
		n_out21p1 = n_tex_read.a;
	}

// VectorUniform:47
	vec3 n_out47p0 = Rough_AO_Far_Int;

// VectorOp:49
	vec3 n_out49p0 = n_out21p0 * n_out47p0;

// VectorMix:53
	vec3 n_out53p0 = mix(n_out52p0, n_out49p0, vec3(n_out3p0));

// VectorDecompose:23
	float n_out23p0 = n_out53p0.x;
	float n_out23p1 = n_out53p0.y;
	float n_out23p2 = n_out53p0.z;

// VectorUniform:55
	vec3 n_out55p0 = Specular_A_B_Far;

// VectorDecompose:57
	float n_out57p0 = n_out55p0.x;
	float n_out57p1 = n_out55p0.y;
	float n_out57p2 = n_out55p0.z;

// ScalarMix:59
	float n_out59p0 = mix(n_out57p0, n_out57p1, n_out43p0);

// ScalarMix:26
	float n_out26p0 = mix(n_out59p0, n_out57p2, n_out3p0);

// TextureUniform:31
	vec3 n_out31p0;
	float n_out31p1;
	{
		vec4 n_tex_read = texture(NormalMap_A, n_out10p0.xy);
		n_out31p0 = n_tex_read.rgb;
		n_out31p1 = n_tex_read.a;
	}

// StochasticTexture:91
	vec3 n_out91p0;
	{
		n_out91p0 = STexComplexB(NormalMap_A,n_out10p0);
	}

// ScalarUniform:35
	float n_out35p0 = Normal_Int;

// NormalMultiply:93
	vec3 n_out93p0;
	{
		n_out93p0 = NormalMultFunc(n_out91p0,n_out35p0);
	}

// TextureUniform:39
	vec3 n_out39p0;
	float n_out39p1;
	{
		vec4 n_tex_read = texture(NormalMap_B, n_out61p0.xy);
		n_out39p0 = n_tex_read.rgb;
		n_out39p1 = n_tex_read.a;
	}

// StochasticTexture:92
	vec3 n_out92p0;
	{
		n_out92p0 = STexComplexB(NormalMap_B,n_out61p0);
	}

// NormalMultiply:94
	vec3 n_out94p0;
	{
		n_out94p0 = NormalMultFunc(n_out92p0,n_out35p0);
	}

// VectorMix:41
	vec3 n_out41p0 = mix(n_out93p0, n_out94p0, vec3(n_out43p0));

// TextureUniform:32
	vec3 n_out32p0;
	float n_out32p1;
	{
		vec4 n_tex_read = texture(NormalMap_Far, n_out11p0.xy);
		n_out32p0 = n_tex_read.rgb;
		n_out32p1 = n_tex_read.a;
	}

// ScalarUniform:36
	float n_out36p0 = Normal_Far_Int;

// NormalMultiply:95
	vec3 n_out95p0;
	{
		n_out95p0 = NormalMultFunc(n_out32p0,n_out36p0);
	}

// VectorMix:33
	vec3 n_out33p0 = mix(n_out41p0, n_out95p0, vec3(n_out3p0));

// Output:0
	ALBEDO = n_out18p0;
	METALLIC = n_out25p0;
	ROUGHNESS = n_out23p0;
	SPECULAR = n_out26p0;
	AO = n_out23p1;
	NORMALMAP = n_out33p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1557, 1196 )
nodes/fragment/0/position = Vector2( 100, 200 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( -2160, 1200 )
nodes/fragment/3/size = Vector2( 555, 257 )
nodes/fragment/3/input_ports = "0,1,Vertex;1,0,Distance_max;2,0,Distance_min;"
nodes/fragment/3/output_ports = "0,0,DistanceFinal;"
nodes/fragment/3/expression = "//Get distance to camera based on vertex
DistanceFinal = clamp(smoothstep(Distance_min, Distance_max, -Vertex.z), 0.0, 1.0);"
nodes/fragment/4/node = SubResource( 22 )
nodes/fragment/4/position = Vector2( -2500, 1260 )
nodes/fragment/5/node = SubResource( 29 )
nodes/fragment/5/position = Vector2( -2480, 1340 )
nodes/fragment/6/node = SubResource( 40 )
nodes/fragment/6/position = Vector2( -2440, 1120 )
nodes/fragment/7/node = SubResource( 51 )
nodes/fragment/7/position = Vector2( -2200, 400 )
nodes/fragment/8/node = SubResource( 62 )
nodes/fragment/8/position = Vector2( -2000, 40 )
nodes/fragment/9/node = SubResource( 72 )
nodes/fragment/9/position = Vector2( -2000, 440 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1800, 0 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1800, 400 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1200, -800 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -1200, -200 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -1200, -920 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -1200, 0 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -1000, -760 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -1000, -140 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( -400, -620 )
nodes/fragment/20/node = SubResource( 10 )
nodes/fragment/20/position = Vector2( -1200, 500 )
nodes/fragment/21/node = SubResource( 11 )
nodes/fragment/21/position = Vector2( -1200, 1120 )
nodes/fragment/23/node = SubResource( 12 )
nodes/fragment/23/position = Vector2( -400, 740 )
nodes/fragment/25/node = SubResource( 13 )
nodes/fragment/25/position = Vector2( -400, 240 )
nodes/fragment/26/node = SubResource( 14 )
nodes/fragment/26/position = Vector2( -400, 400 )
nodes/fragment/31/node = SubResource( 16 )
nodes/fragment/31/position = Vector2( -1200, 1400 )
nodes/fragment/32/node = SubResource( 17 )
nodes/fragment/32/position = Vector2( -1200, 1800 )
nodes/fragment/33/node = SubResource( 18 )
nodes/fragment/33/position = Vector2( -400, 1560 )
nodes/fragment/35/node = SubResource( 19 )
nodes/fragment/35/position = Vector2( -1000, 1580 )
nodes/fragment/36/node = SubResource( 20 )
nodes/fragment/36/position = Vector2( -1200, 2000 )
nodes/fragment/39/node = SubResource( 21 )
nodes/fragment/39/position = Vector2( -1200, 1600 )
nodes/fragment/41/node = SubResource( 23 )
nodes/fragment/41/position = Vector2( -600, 1560 )
nodes/fragment/43/node = SubResource( 24 )
nodes/fragment/43/position = Vector2( -1800, 800 )
nodes/fragment/45/node = SubResource( 25 )
nodes/fragment/45/position = Vector2( -1200, 800 )
nodes/fragment/47/node = SubResource( 26 )
nodes/fragment/47/position = Vector2( -1200, 1320 )
nodes/fragment/48/node = SubResource( 27 )
nodes/fragment/48/position = Vector2( -1200, 720 )
nodes/fragment/49/node = SubResource( 28 )
nodes/fragment/49/position = Vector2( -1000, 1180 )
nodes/fragment/50/node = SubResource( 30 )
nodes/fragment/50/position = Vector2( -1000, 860 )
nodes/fragment/51/node = SubResource( 31 )
nodes/fragment/51/position = Vector2( -1000, 580 )
nodes/fragment/52/node = SubResource( 32 )
nodes/fragment/52/position = Vector2( -793, 744 )
nodes/fragment/53/node = SubResource( 33 )
nodes/fragment/53/position = Vector2( -600, 740 )
nodes/fragment/54/node = SubResource( 34 )
nodes/fragment/54/position = Vector2( -1200, 240 )
nodes/fragment/55/node = SubResource( 35 )
nodes/fragment/55/position = Vector2( -1200, 400 )
nodes/fragment/56/node = SubResource( 36 )
nodes/fragment/56/position = Vector2( -1020, 240 )
nodes/fragment/57/node = SubResource( 37 )
nodes/fragment/57/position = Vector2( -1020, 400 )
nodes/fragment/58/node = SubResource( 38 )
nodes/fragment/58/position = Vector2( -600, 240 )
nodes/fragment/59/node = SubResource( 39 )
nodes/fragment/59/position = Vector2( -600, 400 )
nodes/fragment/60/node = SubResource( 41 )
nodes/fragment/60/position = Vector2( -2000, 240 )
nodes/fragment/61/node = SubResource( 42 )
nodes/fragment/61/position = Vector2( -1800, 200 )
nodes/fragment/62/node = SubResource( 43 )
nodes/fragment/62/position = Vector2( -1200, -600 )
nodes/fragment/63/node = SubResource( 44 )
nodes/fragment/63/position = Vector2( -1200, -400 )
nodes/fragment/64/node = SubResource( 45 )
nodes/fragment/64/position = Vector2( -1000, -540 )
nodes/fragment/65/node = SubResource( 46 )
nodes/fragment/65/position = Vector2( -760, -620 )
nodes/fragment/66/node = SubResource( 47 )
nodes/fragment/66/position = Vector2( -3800, 880 )
nodes/fragment/67/node = SubResource( 48 )
nodes/fragment/67/position = Vector2( -3800, 940 )
nodes/fragment/68/node = SubResource( 49 )
nodes/fragment/68/position = Vector2( -2200, 800 )
nodes/fragment/69/node = SubResource( 50 )
nodes/fragment/69/position = Vector2( -2600, 800 )
nodes/fragment/70/node = SubResource( 52 )
nodes/fragment/70/position = Vector2( -2200, 900 )
nodes/fragment/71/node = SubResource( 53 )
nodes/fragment/71/position = Vector2( -2400, 800 )
nodes/fragment/72/node = SubResource( 54 )
nodes/fragment/72/position = Vector2( -2000, 940 )
nodes/fragment/73/node = SubResource( 55 )
nodes/fragment/73/position = Vector2( -2600, 900 )
nodes/fragment/74/node = SubResource( 56 )
nodes/fragment/74/position = Vector2( -2860, 800 )
nodes/fragment/75/node = SubResource( 57 )
nodes/fragment/75/position = Vector2( -2860, 1000 )
nodes/fragment/76/node = SubResource( 58 )
nodes/fragment/76/position = Vector2( -3200, 1060 )
nodes/fragment/77/node = SubResource( 59 )
nodes/fragment/77/position = Vector2( -3200, 1000 )
nodes/fragment/78/node = SubResource( 60 )
nodes/fragment/78/position = Vector2( -3200, 800 )
nodes/fragment/79/node = SubResource( 61 )
nodes/fragment/79/position = Vector2( -3200, 880 )
nodes/fragment/80/node = SubResource( 63 )
nodes/fragment/80/position = Vector2( -3400, 800 )
nodes/fragment/81/node = SubResource( 64 )
nodes/fragment/81/position = Vector2( -3600, 860 )
nodes/fragment/82/node = SubResource( 65 )
nodes/fragment/82/position = Vector2( -600, -640 )
nodes/fragment/83/node = SubResource( 66 )
nodes/fragment/83/position = Vector2( -640, -480 )
nodes/fragment/84/node = SubResource( 67 )
nodes/fragment/84/position = Vector2( -860, -420 )
nodes/fragment/86/node = SubResource( 68 )
nodes/fragment/86/position = Vector2( -600, -760 )
nodes/fragment/87/node = SubResource( 69 )
nodes/fragment/87/position = Vector2( -1000, -640 )
nodes/fragment/88/node = SubResource( 70 )
nodes/fragment/88/position = Vector2( -1000, -360 )
nodes/fragment/89/node = SubResource( 71 )
nodes/fragment/89/position = Vector2( -1000, 500 )
nodes/fragment/90/node = SubResource( 73 )
nodes/fragment/90/position = Vector2( -1000, 980 )
nodes/fragment/91/node = SubResource( 74 )
nodes/fragment/91/position = Vector2( -1000, 1400 )
nodes/fragment/92/node = SubResource( 75 )
nodes/fragment/92/position = Vector2( -1000, 1720 )
nodes/fragment/93/node = SubResource( 76 )
nodes/fragment/93/position = Vector2( -780, 1400 )
nodes/fragment/94/node = SubResource( 77 )
nodes/fragment/94/position = Vector2( -780, 1720 )
nodes/fragment/95/node = SubResource( 78 )
nodes/fragment/95/position = Vector2( -1000, 1880 )
nodes/fragment/connections = PoolIntArray( 5, 0, 3, 2, 6, 0, 3, 0, 4, 0, 3, 1, 7, 0, 10, 0, 8, 0, 10, 1, 7, 0, 11, 0, 9, 0, 11, 1, 10, 0, 12, 0, 11, 0, 13, 0, 14, 0, 16, 0, 13, 0, 17, 0, 15, 0, 17, 1, 17, 0, 18, 1, 3, 0, 18, 2, 10, 0, 20, 0, 11, 0, 21, 0, 26, 0, 0, 4, 25, 0, 0, 2, 3, 0, 26, 2, 3, 0, 25, 2, 11, 0, 32, 0, 3, 0, 33, 2, 33, 0, 0, 8, 18, 0, 0, 0, 43, 0, 41, 2, 41, 0, 33, 0, 21, 0, 49, 0, 47, 0, 49, 1, 48, 0, 50, 1, 48, 0, 51, 1, 43, 0, 52, 2, 3, 0, 53, 2, 52, 0, 53, 0, 49, 0, 53, 1, 53, 0, 23, 0, 23, 0, 0, 3, 23, 1, 0, 6, 54, 0, 56, 0, 55, 0, 57, 0, 56, 0, 58, 0, 56, 1, 58, 1, 57, 0, 59, 0, 57, 1, 59, 1, 58, 0, 25, 0, 59, 0, 26, 0, 57, 2, 26, 1, 56, 2, 25, 1, 43, 0, 58, 2, 43, 0, 59, 2, 60, 0, 61, 1, 7, 0, 61, 0, 61, 0, 45, 0, 10, 0, 31, 0, 61, 0, 39, 0, 63, 0, 64, 1, 61, 0, 62, 0, 16, 0, 65, 0, 64, 0, 65, 1, 43, 0, 65, 2, 68, 0, 43, 0, 71, 0, 70, 0, 70, 0, 72, 0, 70, 0, 43, 2, 72, 0, 43, 1, 69, 0, 71, 0, 73, 0, 71, 1, 74, 0, 73, 2, 75, 0, 73, 1, 78, 0, 74, 0, 77, 0, 75, 0, 76, 0, 73, 0, 79, 1, 74, 1, 79, 0, 74, 2, 79, 2, 75, 2, 80, 0, 79, 0, 80, 1, 75, 1, 66, 0, 81, 0, 67, 0, 81, 1, 81, 0, 80, 0, 65, 0, 82, 0, 17, 0, 83, 0, 84, 0, 83, 1, 83, 0, 82, 1, 65, 0, 86, 0, 83, 0, 86, 1, 86, 0, 18, 0, 62, 2, 88, 0, 12, 2, 87, 0, 10, 0, 87, 1, 61, 0, 88, 1, 87, 0, 16, 1, 88, 0, 64, 0, 20, 2, 89, 0, 45, 2, 90, 0, 61, 0, 90, 1, 10, 0, 89, 1, 51, 0, 52, 0, 50, 0, 52, 1, 90, 0, 50, 0, 89, 0, 51, 0, 39, 2, 92, 0, 31, 2, 91, 0, 10, 0, 91, 1, 61, 0, 92, 1, 91, 0, 93, 0, 35, 0, 93, 1, 93, 0, 41, 0, 35, 0, 94, 1, 92, 0, 94, 0, 94, 0, 41, 1, 36, 0, 95, 1, 32, 0, 95, 0, 95, 0, 33, 1 )
