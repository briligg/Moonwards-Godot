[gd_resource type="VisualShader" load_steps=87 format=2]

[ext_resource path="res://Assets/SharedAssets/Shaders/StochasticTextureNode.gd" type="Script" id=1]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=2]
size = Vector2( 668, 483 )
expression = "vec4 invcamx = Camera[0];
vec4 invcamy = Camera[1];
vec4 invcamz = Camera[2];
vec4 invcamw = Camera[3];

mat3 invcam = mat3(invcamx.xyz, invcamy.xyz, invcamz.xyz);

vec3 world_normal = Normal * invcam;
vec3 world_pos = (Vertex - invcamw.xyz) * invcam;
NormalWorld = world_normal;
NormalLocation = world_pos;"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "vertex"

[sub_resource type="VisualShaderNodeExpression" id=6]
size = Vector2( 668, 483 )
expression = "float y = normal.y;
normal.y = -normal.z;
normal.z = y;
NormalWorld =  (Camera * (World * vec4(normal, 0.0))).rgb;"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "world"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorDecompose" id=10]

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
uniform_name = "Albedo_A"

[sub_resource type="VisualShaderNodeScalarOp" id=12]

[sub_resource type="VisualShaderNodeVectorDecompose" id=13]

[sub_resource type="VisualShaderNodeScalarInterp" id=14]

[sub_resource type="VisualShaderNodeVectorCompose" id=15]

[sub_resource type="VisualShaderNodeColorUniform" id=16]
uniform_name = "Color_A"

[sub_resource type="VisualShaderNodeCustom" id=17]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=18]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=19]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=20]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=21]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=22]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarClamp" id=23]

[sub_resource type="VisualShaderNodeScalarClamp" id=24]

[sub_resource type="VisualShaderNodeVectorClamp" id=25]

[sub_resource type="VisualShaderNodeVectorOp" id=26]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=27]

[sub_resource type="VisualShaderNodeScalarInterp" id=28]

[sub_resource type="VisualShaderNodeTextureUniform" id=29]
uniform_name = "Rough_A"

[sub_resource type="VisualShaderNodeTextureUniform" id=30]
uniform_name = "Rough_B"

[sub_resource type="VisualShaderNodeVectorDecompose" id=31]

[sub_resource type="VisualShaderNodeVectorDecompose" id=32]

[sub_resource type="VisualShaderNodeScalarInterp" id=33]

[sub_resource type="VisualShaderNodeScalarUniform" id=34]
uniform_name = "Specular_A"

[sub_resource type="VisualShaderNodeScalarUniform" id=35]
uniform_name = "Specular_B"

[sub_resource type="VisualShaderNodeTextureUniform" id=36]
uniform_name = "NormalMap_A"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=37]
uniform_name = "NormalMap_B"
texture_type = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=38]

[sub_resource type="VisualShaderNodeTextureUniform" id=39]
uniform_name = "Noise_RGB"
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=40]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Uniform" id=41]
uniform_name = "UVScale_Noise"

[sub_resource type="VisualShaderNodeVectorOp" id=42]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=43]

[sub_resource type="VisualShaderNodeScalarSwitch" id=44]

[sub_resource type="VisualShaderNodeBooleanUniform" id=45]
uniform_name = "NoiseY"

[sub_resource type="VisualShaderNodeScalarOp" id=46]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=47]
uniform_name = "NoiseIntensity"

[sub_resource type="VisualShaderNodeScalarClamp" id=48]

[sub_resource type="VisualShaderNodeScalarClamp" id=49]

[sub_resource type="VisualShaderNodeScalarClamp" id=50]

[sub_resource type="VisualShaderNodeScalarSwitch" id=51]

[sub_resource type="VisualShaderNodeBooleanUniform" id=52]
uniform_name = "NoiseZ"

[sub_resource type="VisualShaderNodeScalarSwitch" id=53]

[sub_resource type="VisualShaderNodeBooleanUniform" id=54]
uniform_name = "NoiseAlpha"

[sub_resource type="VisualShaderNodeScalarOp" id=55]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=56]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=57]
uniform_name = "Rough_Mult_A"

[sub_resource type="VisualShaderNodeScalarUniform" id=58]
uniform_name = "Rough_Mult_B"

[sub_resource type="VisualShaderNodeScalarFunc" id=59]
function = 31

[sub_resource type="VisualShaderNodeScalarSwitch" id=60]

[sub_resource type="VisualShaderNodeBooleanUniform" id=61]
uniform_name = "NoiseInvert"

[sub_resource type="VisualShaderNodeColorUniform" id=62]
uniform_name = "Color_B"

[sub_resource type="VisualShaderNodeVectorOp" id=63]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=64]
uniform_name = "Albedo_B"

[sub_resource type="VisualShaderNodeVec3Uniform" id=65]
uniform_name = "UVScale_B"

[sub_resource type="VisualShaderNodeVectorOp" id=66]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=67]
uniform_name = "Color_A_Alt"

[sub_resource type="VisualShaderNodeInput" id=68]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=69]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=70]
uniform_name = "Color_B_Alt"

[sub_resource type="VisualShaderNodeVectorOp" id=71]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=72]

[sub_resource type="VisualShaderNodeVectorInterp" id=73]

[sub_resource type="VisualShaderNodeVec3Uniform" id=74]
uniform_name = "UVScale_A"

[sub_resource type="VisualShaderNodeVectorInterp" id=75]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeColorUniform" id=76]
uniform_name = "Fresnel_Color"

[sub_resource type="VisualShaderNodeVec3Constant" id=77]
constant = Vector3( 0, 1, 0 )

[sub_resource type="VisualShaderNodeInput" id=78]
input_name = "vertex"

[sub_resource type="VisualShaderNodeDotProduct" id=79]

[sub_resource type="VisualShaderNodeScalarOp" id=80]
operator = 5

[sub_resource type="VisualShaderNodeScalarOp" id=81]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=82]
uniform_name = "Slope"

[sub_resource type="VisualShaderNodeScalarUniform" id=83]
uniform_name = "Slope_Mult"

[sub_resource type="VisualShaderNodeScalarClamp" id=84]

[sub_resource type="VisualShaderNodeScalarFunc" id=85]
function = 31

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec4 Color_A : hint_color;
uniform vec3 UVScale_A;
uniform sampler2D Albedo_A;
uniform vec4 Color_A_Alt : hint_color;
uniform bool NoiseInvert;
uniform float NoiseIntensity;
uniform bool NoiseAlpha;
uniform bool NoiseZ;
uniform vec3 UVScale_Noise;
uniform sampler2D Noise_RGB : hint_albedo;
uniform bool NoiseY;
uniform vec4 Color_B : hint_color;
uniform vec3 UVScale_B;
uniform sampler2D Albedo_B;
uniform vec4 Color_B_Alt : hint_color;
uniform float Slope;
uniform float Slope_Mult;
uniform float Rough_Mult_A;
uniform sampler2D Rough_A;
uniform float Rough_Mult_B;
uniform sampler2D Rough_B;
uniform float Specular_A;
uniform float Specular_B;
uniform sampler2D NormalMap_A : hint_normal;
uniform sampler2D NormalMap_B : hint_normal;


// StochasticTexture

void TriangleGrid ( vec2 uv ,
out float w1 , out float w2 , out float w3 ,
out vec2 vertex1 , out vec2 vertex2 , out vec2 vertex3 )
{
// Scaling of the input
uv *= 3.464; // 2 * sqrt (3)
// Skew input space into simplex triangle grid
const mat2 gridToSkewedGrid = mat2 (vec2(1.0 , 0.0) , vec2(-0.57735027 , 1.15470054)) ;
vec2 skewedCoord = gridToSkewedGrid * uv ;
// Compute local triangle vertex IDs and local barycentric coordinates
ivec2 baseId = ivec2 ( floor ( skewedCoord ));
vec3 temp = vec3 ( fract ( skewedCoord ) , 0) ;
temp .z = 1.0 - temp . x - temp .y;
if ( temp . z > 0.0)
{
w1 = temp .z;
w2 = temp .y;
w3 = temp .x;
vertex1 = vec2(float(baseId.x), float(baseId.y)) ;
vertex2 = vertex1 + vec2 (0 , 1) ;
vertex3 = vertex1 + vec2 (1 , 0) ;
}
else
{
w1 = - temp .z ;
w2 = 1.0 - temp .y;
w3 = 1.0 - temp .x;
vertex1 = vec2(float(baseId.x), float(baseId.y)) + vec2 (1 , 1) ;
vertex2 = vec2(float(baseId.x), float(baseId.y)) + vec2 (1 , 0) ;
vertex3 = vec2(float(baseId.x), float(baseId.y)) + vec2 (0 , 1) ;
}
}
vec2 hash2D2D (vec2 s)
{
	//magic numbers
	return fract(sin(mod(vec2(dot(s, vec2(127.1,311.7)), dot(s, vec2(269.5,183.3))), 3.14159))*43758.5453);
}

vec3 ProceduralTilingAndBlending (sampler2D input,   vec2 uv )
{
// Get triangle info
float w1 , w2 , w3 ;
vec2 vertex1 , vertex2 , vertex3 ;
TriangleGrid (uv , w1 , w2 , w3 , vertex1 , vertex2 , vertex3 );
// Assign random offset to each triangle vertex
vec2 uv1 = uv + hash2D2D ( vertex1 );
vec2 uv2 = uv + hash2D2D ( vertex2 );
vec2 uv3 = uv + hash2D2D ( vertex3 );
// Precompute UV derivatives
vec2 duvdx = dFdx ( uv ) ;
vec2 duvdy = dFdy ( uv ) ;
// Fetch input
vec3 I1 = textureGrad ( input , uv1 , duvdx , duvdy ). rgb ;
vec3 I2 = textureGrad ( input , uv2 , duvdx , duvdy ). rgb ;
vec3 I3 = textureGrad ( input , uv3 , duvdx , duvdy ). rgb ;
// Variance - preserving blending
vec3 G;
vec3 I = w1 * I1 + w2 * I2 + w3 * I3 ;
G = I - vec3 (0.5) ;
G = G * inversesqrt ( w1 * w1 + w2 * w2 + w3 * w3 ) ;
G = G + vec3 (0.5) ;
vec3 grayXfer = vec3(0.3, 0.59, 0.11);
vec3 gray = vec3(dot(grayXfer, G));
G = mix(G, gray, 0.5);

return mix(I,G,0.4);
}
 
//stochastic sampling
vec4 textureStochastic(sampler2D tex, vec2 uv)
{
	//triangle vertices and blend weights
	//BW_vx[0...2].xyz = triangle verts
	//BW_vx[3].xy = blend weights (z is unused)
	mat4 BW_vx;
 
	//uv transformed into triangular grid space with UV scaled by approximation of 2*sqrt(3)
	vec2 newUV = (mat2(vec2(1.0 , 0.0) , vec2(-0.57735027 , 1.15470054))* uv * 3.464);
 
	//vertex IDs and barycentric coords
	vec2 vxID = vec2 (floor(newUV));
	vec3 fracted = vec3 (fract(newUV), 0);
	fracted.z = 1.0-fracted.x-fracted.y;
 
	BW_vx = ((fracted.z>0.0) ?
		mat4(vec4(vxID, 0,0), vec4(vxID + vec2(0, 1), 0,0), vec4(vxID + vec2(1, 0), 0,0), vec4(fracted,0)) :
		mat4(vec4(vxID + vec2 (1, 1), 0,0), vec4(vxID + vec2 (1, 0), 0,0), vec4(vxID + vec2 (0, 1), 0,0), vec4(-fracted.z, 1.0-fracted.y, 1.0-fracted.x,0)));
 
	//calculate derivatives to avoid triangular grid artifacts
	vec2 dx = dFdx(uv);
	vec2 dy = dFdy(uv);

	//blend samples with calculated weights
	return (textureGrad(tex, uv + hash2D2D(BW_vx[0].xy), dx, dy) * BW_vx[3].x +
		   textureGrad(tex, uv + hash2D2D(BW_vx[1].xy), dx, dy) * BW_vx[3].y +
		   textureGrad(tex, uv + hash2D2D(BW_vx[2].xy), dx, dy) * BW_vx[3].z);
	
}
vec3 STexComplexB(sampler2D input, vec3 uv){
	vec4 tex = vec4(ProceduralTilingAndBlending(input, uv.xy),1);
	tex = mix(tex, textureStochastic(input, uv.xy), 0.4);
	return tex.rgb;
}


void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:14
	vec3 n_out14p0 = Color_A.rgb;
	float n_out14p1 = Color_A.a;

// Input:7
	vec3 n_out7p0 = vec3(UV, 0.0);

// VectorUniform:8
	vec3 n_out8p0 = UVScale_A;

// VectorOp:10
	vec3 n_out10p0 = n_out7p0 * n_out8p0;

// TextureUniform:12
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 n_tex_read = texture(Albedo_A, n_out10p0.xy);
		n_out12p0 = n_tex_read.rgb;
		n_out12p1 = n_tex_read.a;
	}

// StochasticTexture:145
	vec3 n_out145p0;
	{
		n_out145p0 = STexComplexB(Albedo_A,n_out10p0);
	}

// VectorOp:16
	vec3 n_out16p0 = n_out14p0 * n_out145p0;

// ColorUniform:69
	vec3 n_out69p0 = Color_A_Alt.rgb;
	float n_out69p1 = Color_A_Alt.a;

// VectorOp:70
	vec3 n_out70p0 = n_out145p0 * n_out69p0;

// BooleanUniform:60
	bool n_out60p0 = NoiseInvert;

// ScalarUniform:43
	float n_out43p0 = NoiseIntensity;

// BooleanUniform:53
	bool n_out53p0 = NoiseAlpha;

// BooleanUniform:51
	bool n_out51p0 = NoiseZ;

// Input:36
	vec3 n_out36p0 = vec3(UV, 0.0);

// VectorUniform:37
	vec3 n_out37p0 = UVScale_Noise;

// VectorOp:38
	vec3 n_out38p0 = n_out36p0 * n_out37p0;

// TextureUniform:34
	vec3 n_out34p0;
	float n_out34p1;
	{
		vec4 n_tex_read = texture(Noise_RGB, n_out38p0.xy);
		n_out34p0 = n_tex_read.rgb;
		n_out34p1 = n_tex_read.a;
	}

// VectorDecompose:39
	float n_out39p0 = n_out34p0.x;
	float n_out39p1 = n_out34p0.y;
	float n_out39p2 = n_out34p0.z;

// ScalarSwitch:50
	float n_out50p0;
	if(n_out51p0)
	{
		n_out50p0 = n_out34p1;
	}
	else
	{
		n_out50p0 = n_out39p2;
	}

// BooleanUniform:41
	bool n_out41p0 = NoiseY;

// ScalarSwitch:40
	float n_out40p0;
	if(n_out41p0)
	{
		n_out40p0 = n_out39p1;
	}
	else
	{
		n_out40p0 = n_out39p0;
	}

// ScalarSwitch:52
	float n_out52p0;
	if(n_out53p0)
	{
		n_out52p0 = n_out50p0;
	}
	else
	{
		n_out52p0 = n_out40p0;
	}

// ScalarOp:42
	float n_out42p0 = n_out43p0 * n_out52p0;

// ScalarClamp:44
	float n_in44p1 = 0.00000;
	float n_in44p2 = 1.00000;
	float n_out44p0 = clamp(n_out42p0, n_in44p1, n_in44p2);

// ScalarFunc:58
	float n_out58p0 = 1.0 - n_out44p0;

// ScalarSwitch:59
	float n_out59p0;
	if(n_out60p0)
	{
		n_out59p0 = n_out58p0;
	}
	else
	{
		n_out59p0 = n_out44p0;
	}

// VectorMix:18
	vec3 n_out18p0 = mix(n_out16p0, n_out70p0, vec3(n_out59p0));

// ColorUniform:64
	vec3 n_out64p0 = Color_B.rgb;
	float n_out64p1 = Color_B.a;

// VectorUniform:67
	vec3 n_out67p0 = UVScale_B;

// VectorOp:68
	vec3 n_out68p0 = n_out7p0 * n_out67p0;

// TextureUniform:66
	vec3 n_out66p0;
	float n_out66p1;
	{
		vec4 n_tex_read = texture(Albedo_B, n_out68p0.xy);
		n_out66p0 = n_tex_read.rgb;
		n_out66p1 = n_tex_read.a;
	}

// StochasticTexture:146
	vec3 n_out146p0;
	{
		n_out146p0 = STexComplexB(Albedo_B,n_out68p0);
	}

// VectorOp:65
	vec3 n_out65p0 = n_out64p0 * n_out146p0;

// ColorUniform:71
	vec3 n_out71p0 = Color_B_Alt.rgb;
	float n_out71p1 = Color_B_Alt.a;

// VectorOp:72
	vec3 n_out72p0 = n_out146p0 * n_out71p0;

// VectorMix:75
	vec3 n_out75p0 = mix(n_out65p0, n_out72p0, vec3(n_out59p0));

// Input:112
	mat4 n_out112p0 = INV_CAMERA_MATRIX;

// Input:113
	vec3 n_out113p0 = NORMAL;

// Input:114
	vec3 n_out114p0 = VERTEX;

// Expression:100
	vec3 n_out100p0;
	vec3 n_out100p1;
	n_out100p0 = vec3(0.0, 0.0, 0.0);
	n_out100p1 = vec3(0.0, 0.0, 0.0);
	{
		vec4 invcamx = n_out112p0[0];
		vec4 invcamy = n_out112p0[1];
		vec4 invcamz = n_out112p0[2];
		vec4 invcamw = n_out112p0[3];
		
		mat3 invcam = mat3(invcamx.xyz, invcamy.xyz, invcamz.xyz);
		
		vec3 world_normal = n_out113p0 * invcam;
		vec3 world_pos = (n_out114p0 - invcamw.xyz) * invcam;
		n_out100p0 = world_normal;
		n_out100p1 = world_pos;
	}

// Vector:83
	vec3 n_out83p0 = vec3(0.000000, 1.000000, 0.000000);

// DotProduct:85
	float n_out85p0 = dot(n_out100p0, n_out83p0);

// ScalarUniform:88
	float n_out88p0 = Slope;

// ScalarOp:86
	float n_out86p0 = pow(n_out85p0, n_out88p0);

// ScalarUniform:89
	float n_out89p0 = Slope_Mult;

// ScalarOp:87
	float n_out87p0 = n_out86p0 * n_out89p0;

// ScalarClamp:98
	float n_in98p1 = 0.00000;
	float n_in98p2 = 1.00000;
	float n_out98p0 = clamp(n_out87p0, n_in98p1, n_in98p2);

// ScalarFunc:99
	float n_out99p0 = 1.0 - n_out98p0;

// ScalarOp:124
	float n_in124p1 = 0.00000;
	float n_out124p0 = n_out99p0 + n_in124p1;

// VectorMix:78
	vec3 n_out78p0 = mix(n_out18p0, n_out75p0, vec3(n_out124p0));

// VectorClamp:156
	vec3 n_in156p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in156p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out156p0 = clamp(n_out78p0, n_in156p1, n_in156p2);

// ScalarUniform:56
	float n_out56p0 = Rough_Mult_A;

// TextureUniform:20
	vec3 n_out20p0;
	float n_out20p1;
	{
		vec4 n_tex_read = texture(Rough_A, n_out10p0.xy);
		n_out20p0 = n_tex_read.rgb;
		n_out20p1 = n_tex_read.a;
	}

// StochasticTexture:147
	vec3 n_out147p0;
	{
		n_out147p0 = STexComplexB(Rough_A,n_out10p0);
	}

// VectorDecompose:22
	float n_out22p0 = n_out147p0.x;
	float n_out22p1 = n_out147p0.y;
	float n_out22p2 = n_out147p0.z;

// ScalarOp:54
	float n_out54p0 = n_out56p0 * n_out22p0;

// ScalarUniform:57
	float n_out57p0 = Rough_Mult_B;

// TextureUniform:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 n_tex_read = texture(Rough_B, n_out68p0.xy);
		n_out21p0 = n_tex_read.rgb;
		n_out21p1 = n_tex_read.a;
	}

// StochasticTexture:148
	vec3 n_out148p0;
	{
		n_out148p0 = STexComplexB(Rough_B,n_out68p0);
	}

// VectorDecompose:23
	float n_out23p0 = n_out148p0.x;
	float n_out23p1 = n_out148p0.y;
	float n_out23p2 = n_out148p0.z;

// ScalarOp:55
	float n_out55p0 = n_out57p0 * n_out23p0;

// ScalarMix:19
	float n_out19p0 = mix(n_out54p0, n_out55p0, n_out124p0);

// ScalarClamp:47
	float n_in47p1 = 0.00000;
	float n_in47p2 = 1.00000;
	float n_out47p0 = clamp(n_out19p0, n_in47p1, n_in47p2);

// ScalarUniform:29
	float n_out29p0 = Specular_A;

// ScalarUniform:30
	float n_out30p0 = Specular_B;

// ScalarMix:26
	float n_out26p0 = mix(n_out29p0, n_out30p0, n_out124p0);

// ScalarClamp:49
	float n_in49p1 = 0.00000;
	float n_in49p2 = 1.00000;
	float n_out49p0 = clamp(n_out26p0, n_in49p1, n_in49p2);

// TextureUniform:31
	vec3 n_out31p0;
	float n_out31p1;
	{
		vec4 n_tex_read = texture(NormalMap_A, n_out10p0.xy);
		n_out31p0 = n_tex_read.rgb;
		n_out31p1 = n_tex_read.a;
	}

// StochasticTexture:149
	vec3 n_out149p0;
	{
		n_out149p0 = STexComplexB(NormalMap_A,n_out10p0);
	}

// TextureUniform:32
	vec3 n_out32p0;
	float n_out32p1;
	{
		vec4 n_tex_read = texture(NormalMap_B, n_out68p0.xy);
		n_out32p0 = n_tex_read.rgb;
		n_out32p1 = n_tex_read.a;
	}

// StochasticTexture:150
	vec3 n_out150p0;
	{
		n_out150p0 = STexComplexB(NormalMap_B,n_out68p0);
	}

// VectorMix:33
	vec3 n_out33p0 = mix(n_out149p0, n_out150p0, vec3(n_out124p0));

// Output:0
	ALBEDO = n_out156p0;
	ROUGHNESS = n_out47p0;
	SPECULAR = n_out49p0;
	NORMALMAP = n_out33p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -808, -251 )
nodes/fragment/0/position = Vector2( 400, 200 )
nodes/fragment/7/node = SubResource( 68 )
nodes/fragment/7/position = Vector2( -2000, -60 )
nodes/fragment/8/node = SubResource( 74 )
nodes/fragment/8/position = Vector2( -2000, -400 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1800, -400 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( -1200, -1500 )
nodes/fragment/14/node = SubResource( 16 )
nodes/fragment/14/position = Vector2( -1200, -1600 )
nodes/fragment/16/node = SubResource( 26 )
nodes/fragment/16/position = Vector2( -1000, -1520 )
nodes/fragment/18/node = SubResource( 27 )
nodes/fragment/18/position = Vector2( -800, -1520 )
nodes/fragment/19/node = SubResource( 28 )
nodes/fragment/19/position = Vector2( -400, 880 )
nodes/fragment/20/node = SubResource( 29 )
nodes/fragment/20/position = Vector2( -1200, 800 )
nodes/fragment/21/node = SubResource( 30 )
nodes/fragment/21/position = Vector2( -1200, 1000 )
nodes/fragment/22/node = SubResource( 31 )
nodes/fragment/22/position = Vector2( -1000, 880 )
nodes/fragment/23/node = SubResource( 32 )
nodes/fragment/23/position = Vector2( -1000, 1080 )
nodes/fragment/26/node = SubResource( 33 )
nodes/fragment/26/position = Vector2( -800, 320 )
nodes/fragment/29/node = SubResource( 34 )
nodes/fragment/29/position = Vector2( -1000, 340 )
nodes/fragment/30/node = SubResource( 35 )
nodes/fragment/30/position = Vector2( -1000, 400 )
nodes/fragment/31/node = SubResource( 36 )
nodes/fragment/31/position = Vector2( -1200, 1400 )
nodes/fragment/32/node = SubResource( 37 )
nodes/fragment/32/position = Vector2( -1200, 1600 )
nodes/fragment/33/node = SubResource( 38 )
nodes/fragment/33/position = Vector2( -600, 1480 )
nodes/fragment/34/node = SubResource( 39 )
nodes/fragment/34/position = Vector2( -3200, 800 )
nodes/fragment/36/node = SubResource( 40 )
nodes/fragment/36/position = Vector2( -3600, 800 )
nodes/fragment/37/node = SubResource( 41 )
nodes/fragment/37/position = Vector2( -3600, 940 )
nodes/fragment/38/node = SubResource( 42 )
nodes/fragment/38/position = Vector2( -3400, 800 )
nodes/fragment/39/node = SubResource( 43 )
nodes/fragment/39/position = Vector2( -3000, 880 )
nodes/fragment/40/node = SubResource( 44 )
nodes/fragment/40/position = Vector2( -2680, 800 )
nodes/fragment/41/node = SubResource( 45 )
nodes/fragment/41/position = Vector2( -3000, 800 )
nodes/fragment/42/node = SubResource( 46 )
nodes/fragment/42/position = Vector2( -2200, 800 )
nodes/fragment/43/node = SubResource( 47 )
nodes/fragment/43/position = Vector2( -2400, 800 )
nodes/fragment/44/node = SubResource( 48 )
nodes/fragment/44/position = Vector2( -2000, 880 )
nodes/fragment/47/node = SubResource( 49 )
nodes/fragment/47/position = Vector2( 0, 880 )
nodes/fragment/49/node = SubResource( 50 )
nodes/fragment/49/position = Vector2( -200, 320 )
nodes/fragment/50/node = SubResource( 51 )
nodes/fragment/50/position = Vector2( -2680, 1000 )
nodes/fragment/51/node = SubResource( 52 )
nodes/fragment/51/position = Vector2( -3000, 1000 )
nodes/fragment/52/node = SubResource( 53 )
nodes/fragment/52/position = Vector2( -2400, 900 )
nodes/fragment/53/node = SubResource( 54 )
nodes/fragment/53/position = Vector2( -3000, 1060 )
nodes/fragment/54/node = SubResource( 55 )
nodes/fragment/54/position = Vector2( -600, 800 )
nodes/fragment/55/node = SubResource( 56 )
nodes/fragment/55/position = Vector2( -600, 1000 )
nodes/fragment/56/node = SubResource( 57 )
nodes/fragment/56/position = Vector2( -1000, 800 )
nodes/fragment/57/node = SubResource( 58 )
nodes/fragment/57/position = Vector2( -1000, 1000 )
nodes/fragment/58/node = SubResource( 59 )
nodes/fragment/58/position = Vector2( -1800, 940 )
nodes/fragment/59/node = SubResource( 60 )
nodes/fragment/59/position = Vector2( -1600, 800 )
nodes/fragment/60/node = SubResource( 61 )
nodes/fragment/60/position = Vector2( -2000, 800 )
nodes/fragment/64/node = SubResource( 62 )
nodes/fragment/64/position = Vector2( -1200, -1200 )
nodes/fragment/65/node = SubResource( 63 )
nodes/fragment/65/position = Vector2( -1000, -1120 )
nodes/fragment/66/node = SubResource( 64 )
nodes/fragment/66/position = Vector2( -1200, -1100 )
nodes/fragment/67/node = SubResource( 65 )
nodes/fragment/67/position = Vector2( -2000, -200 )
nodes/fragment/68/node = SubResource( 66 )
nodes/fragment/68/position = Vector2( -1800, -200 )
nodes/fragment/69/node = SubResource( 67 )
nodes/fragment/69/position = Vector2( -1200, -1320 )
nodes/fragment/70/node = SubResource( 69 )
nodes/fragment/70/position = Vector2( -1000, -1320 )
nodes/fragment/71/node = SubResource( 70 )
nodes/fragment/71/position = Vector2( -1200, -920 )
nodes/fragment/72/node = SubResource( 71 )
nodes/fragment/72/position = Vector2( -1000, -920 )
nodes/fragment/75/node = SubResource( 72 )
nodes/fragment/75/position = Vector2( -800, -1120 )
nodes/fragment/78/node = SubResource( 73 )
nodes/fragment/78/position = Vector2( -600, -1240 )
nodes/fragment/80/node = SubResource( 75 )
nodes/fragment/80/position = Vector2( -400, -200 )
nodes/fragment/81/node = SubResource( 76 )
nodes/fragment/81/position = Vector2( -1400, -300 )
nodes/fragment/83/node = SubResource( 77 )
nodes/fragment/83/position = Vector2( -2840, 240 )
nodes/fragment/84/node = SubResource( 78 )
nodes/fragment/84/position = Vector2( -2800, 500 )
nodes/fragment/85/node = SubResource( 79 )
nodes/fragment/85/position = Vector2( -2400, 400 )
nodes/fragment/86/node = SubResource( 80 )
nodes/fragment/86/position = Vector2( -2200, 400 )
nodes/fragment/87/node = SubResource( 81 )
nodes/fragment/87/position = Vector2( -2000, 400 )
nodes/fragment/88/node = SubResource( 82 )
nodes/fragment/88/position = Vector2( -2400, 500 )
nodes/fragment/89/node = SubResource( 83 )
nodes/fragment/89/position = Vector2( -2200, 500 )
nodes/fragment/98/node = SubResource( 84 )
nodes/fragment/98/position = Vector2( -1800, 420 )
nodes/fragment/99/node = SubResource( 85 )
nodes/fragment/99/position = Vector2( -1640, 420 )
nodes/fragment/100/node = SubResource( 2 )
nodes/fragment/100/position = Vector2( -3580, 280 )
nodes/fragment/100/size = Vector2( 668, 483 )
nodes/fragment/100/input_ports = "0,3,Camera;1,1,Normal;2,1,Vertex;"
nodes/fragment/100/output_ports = "0,1,NormalWorld;1,1,NormalLocation;"
nodes/fragment/100/expression = "vec4 invcamx = Camera[0];
vec4 invcamy = Camera[1];
vec4 invcamz = Camera[2];
vec4 invcamw = Camera[3];

mat3 invcam = mat3(invcamx.xyz, invcamy.xyz, invcamz.xyz);

vec3 world_normal = Normal * invcam;
vec3 world_pos = (Vertex - invcamw.xyz) * invcam;
NormalWorld = world_normal;
NormalLocation = world_pos;"
nodes/fragment/112/node = SubResource( 3 )
nodes/fragment/112/position = Vector2( -3780, 320 )
nodes/fragment/113/node = SubResource( 4 )
nodes/fragment/113/position = Vector2( -3780, 400 )
nodes/fragment/114/node = SubResource( 5 )
nodes/fragment/114/position = Vector2( -3780, 480 )
nodes/fragment/115/node = SubResource( 6 )
nodes/fragment/115/position = Vector2( -3580, -240 )
nodes/fragment/115/size = Vector2( 668, 483 )
nodes/fragment/115/input_ports = "0,3,Camera;1,3,World;2,1,Normal;"
nodes/fragment/115/output_ports = "0,1,NormalWorld;"
nodes/fragment/115/expression = "float y = normal.y;
normal.y = -normal.z;
normal.z = y;
NormalWorld =  (Camera * (World * vec4(normal, 0.0))).rgb;"
nodes/fragment/116/node = SubResource( 7 )
nodes/fragment/116/position = Vector2( -3800, -200 )
nodes/fragment/117/node = SubResource( 8 )
nodes/fragment/117/position = Vector2( -3800, -120 )
nodes/fragment/118/node = SubResource( 9 )
nodes/fragment/118/position = Vector2( -3800, -40 )
nodes/fragment/119/node = SubResource( 10 )
nodes/fragment/119/position = Vector2( 40, 420 )
nodes/fragment/124/node = SubResource( 12 )
nodes/fragment/124/position = Vector2( -1400, 400 )
nodes/fragment/130/node = SubResource( 13 )
nodes/fragment/130/position = Vector2( -1200, -300 )
nodes/fragment/131/node = SubResource( 14 )
nodes/fragment/131/position = Vector2( -800, -300 )
nodes/fragment/132/node = SubResource( 15 )
nodes/fragment/132/position = Vector2( -600, -300 )
nodes/fragment/145/node = SubResource( 17 )
nodes/fragment/145/position = Vector2( -1000, -1400 )
nodes/fragment/146/node = SubResource( 18 )
nodes/fragment/146/position = Vector2( -1000, -1000 )
nodes/fragment/147/node = SubResource( 19 )
nodes/fragment/147/position = Vector2( -800, 800 )
nodes/fragment/148/node = SubResource( 20 )
nodes/fragment/148/position = Vector2( -800, 1000 )
nodes/fragment/149/node = SubResource( 21 )
nodes/fragment/149/position = Vector2( -1000, 1520 )
nodes/fragment/150/node = SubResource( 22 )
nodes/fragment/150/position = Vector2( -1000, 1720 )
nodes/fragment/154/node = SubResource( 23 )
nodes/fragment/154/position = Vector2( 40, 520 )
nodes/fragment/155/node = SubResource( 24 )
nodes/fragment/155/position = Vector2( 40, 640 )
nodes/fragment/156/node = SubResource( 25 )
nodes/fragment/156/position = Vector2( 20, -340 )
nodes/fragment/connections = PoolIntArray( 7, 0, 10, 0, 8, 0, 10, 1, 10, 0, 12, 0, 14, 0, 16, 0, 16, 0, 18, 0, 10, 0, 20, 0, 30, 0, 26, 1, 36, 0, 38, 0, 37, 0, 38, 1, 38, 0, 34, 0, 34, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 34, 1, 50, 1, 39, 2, 50, 2, 39, 0, 40, 2, 39, 1, 40, 1, 51, 0, 50, 0, 50, 0, 52, 1, 40, 0, 52, 2, 53, 0, 52, 0, 52, 0, 42, 1, 43, 0, 42, 0, 54, 0, 19, 0, 55, 0, 19, 1, 60, 0, 59, 0, 58, 0, 59, 1, 44, 0, 59, 2, 44, 0, 58, 0, 29, 0, 26, 0, 59, 0, 18, 2, 64, 0, 65, 0, 67, 0, 68, 1, 7, 0, 68, 0, 68, 0, 66, 0, 69, 0, 70, 1, 71, 0, 72, 1, 70, 0, 18, 1, 65, 0, 75, 0, 72, 0, 75, 1, 59, 0, 75, 2, 18, 0, 78, 0, 75, 0, 78, 1, 88, 0, 86, 1, 89, 0, 87, 1, 68, 0, 21, 0, 10, 0, 31, 0, 68, 0, 32, 0, 86, 0, 87, 0, 98, 0, 99, 0, 87, 0, 98, 0, 56, 0, 54, 0, 22, 0, 54, 1, 23, 0, 55, 1, 57, 0, 55, 0, 112, 0, 100, 0, 113, 0, 100, 1, 114, 0, 100, 2, 85, 0, 86, 0, 100, 0, 85, 0, 83, 0, 85, 1, 116, 0, 115, 0, 117, 0, 115, 1, 118, 0, 115, 2, 99, 0, 124, 0, 124, 0, 19, 2, 124, 0, 33, 2, 124, 0, 26, 2, 124, 0, 80, 2, 124, 0, 78, 2, 81, 0, 130, 0, 130, 0, 131, 0, 130, 1, 131, 1, 132, 0, 80, 0, 131, 0, 132, 0, 130, 2, 132, 2, 59, 0, 131, 2, 49, 0, 0, 4, 47, 0, 0, 3, 12, 2, 145, 0, 10, 0, 145, 1, 66, 2, 146, 0, 68, 0, 146, 1, 146, 0, 72, 0, 146, 0, 65, 1, 145, 0, 70, 0, 145, 0, 16, 1, 20, 2, 147, 0, 10, 0, 147, 1, 147, 0, 22, 0, 148, 0, 23, 0, 21, 2, 148, 0, 68, 0, 148, 1, 31, 2, 149, 0, 32, 2, 150, 0, 68, 0, 150, 1, 10, 0, 149, 1, 149, 0, 33, 0, 150, 0, 33, 1, 119, 0, 154, 0, 119, 2, 155, 0, 156, 0, 0, 0, 78, 0, 156, 0, 80, 0, 119, 0, 26, 0, 49, 0, 19, 0, 47, 0, 33, 0, 0, 8 )
