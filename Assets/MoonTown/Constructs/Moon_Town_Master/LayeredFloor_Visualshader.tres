[gd_resource type="VisualShader" load_steps=87 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
uniform_name = "Albedo_A"

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
uniform_name = "Albedo_C"

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "Color_A"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "Color_C"

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=9]

[sub_resource type="VisualShaderNodeScalarInterp" id=10]

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
uniform_name = "Rough_A"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
uniform_name = "Rough_B"
texture_type = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=13]

[sub_resource type="VisualShaderNodeVectorDecompose" id=14]

[sub_resource type="VisualShaderNodeScalarInterp" id=15]

[sub_resource type="VisualShaderNodeScalarInterp" id=16]

[sub_resource type="VisualShaderNodeScalarInterp" id=17]

[sub_resource type="VisualShaderNodeScalarUniform" id=18]
uniform_name = "Metallic_A"

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
uniform_name = "Metallic_B"

[sub_resource type="VisualShaderNodeScalarUniform" id=20]
uniform_name = "Specular_A"

[sub_resource type="VisualShaderNodeScalarUniform" id=21]
uniform_name = "Specular_B"

[sub_resource type="VisualShaderNodeTextureUniform" id=22]
uniform_name = "NormalMap_A"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=23]
uniform_name = "NormalMap_B"
texture_type = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=24]

[sub_resource type="VisualShaderNodeTextureUniform" id=25]
uniform_name = "Noise_RGB"
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Uniform" id=27]
uniform_name = "UVScale_Noise"

[sub_resource type="VisualShaderNodeVectorOp" id=28]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=29]

[sub_resource type="VisualShaderNodeScalarSwitch" id=30]

[sub_resource type="VisualShaderNodeBooleanUniform" id=31]
uniform_name = "NoiseY"

[sub_resource type="VisualShaderNodeScalarOp" id=32]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=33]
uniform_name = "NoiseIntensity"

[sub_resource type="VisualShaderNodeScalarClamp" id=34]

[sub_resource type="VisualShaderNodeScalarClamp" id=35]

[sub_resource type="VisualShaderNodeScalarClamp" id=36]

[sub_resource type="VisualShaderNodeScalarClamp" id=37]

[sub_resource type="VisualShaderNodeScalarSwitch" id=38]

[sub_resource type="VisualShaderNodeBooleanUniform" id=39]
uniform_name = "NoiseZ"

[sub_resource type="VisualShaderNodeScalarSwitch" id=40]

[sub_resource type="VisualShaderNodeBooleanUniform" id=41]
uniform_name = "NoiseAlpha"

[sub_resource type="VisualShaderNodeScalarOp" id=42]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=43]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=44]
uniform_name = "Rough_Mult_A"

[sub_resource type="VisualShaderNodeScalarUniform" id=45]
uniform_name = "Rough_Mult_B"

[sub_resource type="VisualShaderNodeScalarFunc" id=46]
function = 31

[sub_resource type="VisualShaderNodeScalarSwitch" id=47]

[sub_resource type="VisualShaderNodeBooleanUniform" id=48]
uniform_name = "NoiseInvert"

[sub_resource type="VisualShaderNodeFresnel" id=49]

[sub_resource type="VisualShaderNodeScalarUniform" id=50]
uniform_name = "Fresnel_Power"

[sub_resource type="VisualShaderNodeColorUniform" id=52]
uniform_name = "Color_B"

[sub_resource type="VisualShaderNodeVectorOp" id=53]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=54]
uniform_name = "Albedo_B"

[sub_resource type="VisualShaderNodeVec3Uniform" id=55]
uniform_name = "UVScale_B"

[sub_resource type="VisualShaderNodeVectorOp" id=56]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=57]
uniform_name = "Color_A_Alt"

[sub_resource type="VisualShaderNodeInput" id=58]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=59]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=60]
uniform_name = "Color_B_Alt"

[sub_resource type="VisualShaderNodeVectorOp" id=61]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=62]
uniform_name = "Color_C_Alt"

[sub_resource type="VisualShaderNodeVectorOp" id=63]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=64]

[sub_resource type="VisualShaderNodeVectorInterp" id=65]

[sub_resource type="VisualShaderNodeTextureUniform" id=66]
uniform_name = "Rough_C"
texture_type = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=67]

[sub_resource type="VisualShaderNodeVectorInterp" id=68]

[sub_resource type="VisualShaderNodeVec3Uniform" id=69]
uniform_name = "UVScale_A"

[sub_resource type="VisualShaderNodeVectorInterp" id=71]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeColorUniform" id=72]
uniform_name = "Fresnel_Color"

[sub_resource type="VisualShaderNodeVec3Constant" id=73]
constant = Vector3( 0, 0, 1 )

[sub_resource type="VisualShaderNodeInput" id=74]
input_name = "normal"

[sub_resource type="VisualShaderNodeDotProduct" id=75]

[sub_resource type="VisualShaderNodeScalarOp" id=76]
operator = 5

[sub_resource type="VisualShaderNodeScalarOp" id=77]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=78]
uniform_name = "Slope"

[sub_resource type="VisualShaderNodeScalarUniform" id=79]
uniform_name = "Slope_Mult"

[sub_resource type="VisualShaderNodeVec3Uniform" id=70]
uniform_name = "UVScale_C"

[sub_resource type="VisualShaderNodeVectorInterp" id=80]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeScalarUniform" id=81]
uniform_name = "Metallic_C"

[sub_resource type="VisualShaderNodeScalarUniform" id=82]
uniform_name = "Specular_C"

[sub_resource type="VisualShaderNodeScalarInterp" id=83]

[sub_resource type="VisualShaderNodeScalarInterp" id=84]

[sub_resource type="VisualShaderNodeVectorInterp" id=85]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeTextureUniform" id=86]
uniform_name = "NormalMap_C"
texture_type = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=87]

[resource]
code = "shader_type spatial;
uniform vec4 Color_A : hint_color;
uniform vec3 UVScale_A;
uniform sampler2D Albedo_A;
uniform vec4 Color_A_Alt : hint_color;
uniform bool NoiseInvert;
uniform float NoiseIntensity;
uniform bool NoiseAlpha;
uniform bool NoiseZ;
uniform vec3 UVScale_Noise;
uniform sampler2D Noise_RGB : hint_albedo;
uniform bool NoiseY;
uniform vec4 Color_B : hint_color;
uniform vec3 UVScale_B;
uniform sampler2D Albedo_B;
uniform vec4 Color_B_Alt : hint_color;
uniform float Slope;
uniform float Slope_Mult;
uniform vec4 Color_C : hint_color;
uniform vec3 UVScale_C;
uniform sampler2D Albedo_C;
uniform vec4 Color_C_Alt : hint_color;
uniform float Metallic_A;
uniform float Metallic_B;
uniform float Metallic_C;
uniform sampler2D Rough_A : hint_albedo;
uniform float Rough_Mult_A;
uniform sampler2D Rough_B : hint_albedo;
uniform float Rough_Mult_B;
uniform float Specular_A;
uniform float Specular_B;
uniform float Specular_C;
uniform vec4 Fresnel_Color : hint_color;
uniform float Fresnel_Power;
uniform sampler2D NormalMap_A : hint_normal;
uniform sampler2D NormalMap_B : hint_normal;
uniform sampler2D NormalMap_C : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:14
	vec3 n_out14p0 = Color_A.rgb;
	float n_out14p1 = Color_A.a;

// Input:7
	vec3 n_out7p0 = vec3(UV, 0.0);

// VectorUniform:8
	vec3 n_out8p0 = UVScale_A;

// VectorOp:10
	vec3 n_out10p0 = n_out7p0 * n_out8p0;

// TextureUniform:12
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 n_tex_read = texture(Albedo_A, n_out10p0.xy);
		n_out12p0 = n_tex_read.rgb;
		n_out12p1 = n_tex_read.a;
	}

// VectorOp:16
	vec3 n_out16p0 = n_out14p0 * n_out12p0;

// ColorUniform:69
	vec3 n_out69p0 = Color_A_Alt.rgb;
	float n_out69p1 = Color_A_Alt.a;

// VectorOp:70
	vec3 n_out70p0 = n_out12p0 * n_out69p0;

// BooleanUniform:60
	bool n_out60p0 = NoiseInvert;

// ScalarUniform:43
	float n_out43p0 = NoiseIntensity;

// BooleanUniform:53
	bool n_out53p0 = NoiseAlpha;

// BooleanUniform:51
	bool n_out51p0 = NoiseZ;

// Input:36
	vec3 n_out36p0 = vec3(UV, 0.0);

// VectorUniform:37
	vec3 n_out37p0 = UVScale_Noise;

// VectorOp:38
	vec3 n_out38p0 = n_out36p0 * n_out37p0;

// TextureUniform:34
	vec3 n_out34p0;
	float n_out34p1;
	{
		vec4 n_tex_read = texture(Noise_RGB, n_out38p0.xy);
		n_out34p0 = n_tex_read.rgb;
		n_out34p1 = n_tex_read.a;
	}

// VectorDecompose:39
	float n_out39p0 = n_out34p0.x;
	float n_out39p1 = n_out34p0.y;
	float n_out39p2 = n_out34p0.z;

// ScalarSwitch:50
	float n_out50p0;
	if(n_out51p0)
	{
		n_out50p0 = n_out34p1;
	}
	else
	{
		n_out50p0 = n_out39p2;
	}

// BooleanUniform:41
	bool n_out41p0 = NoiseY;

// ScalarSwitch:40
	float n_out40p0;
	if(n_out41p0)
	{
		n_out40p0 = n_out39p1;
	}
	else
	{
		n_out40p0 = n_out39p0;
	}

// ScalarSwitch:52
	float n_out52p0;
	if(n_out53p0)
	{
		n_out52p0 = n_out50p0;
	}
	else
	{
		n_out52p0 = n_out40p0;
	}

// ScalarOp:42
	float n_out42p0 = n_out43p0 * n_out52p0;

// ScalarClamp:44
	float n_in44p1 = 0.00000;
	float n_in44p2 = 1.00000;
	float n_out44p0 = clamp(n_out42p0, n_in44p1, n_in44p2);

// ScalarFunc:58
	float n_out58p0 = 1.0 - n_out44p0;

// ScalarSwitch:59
	float n_out59p0;
	if(n_out60p0)
	{
		n_out59p0 = n_out58p0;
	}
	else
	{
		n_out59p0 = n_out44p0;
	}

// VectorMix:18
	vec3 n_out18p0 = mix(n_out16p0, n_out70p0, vec3(n_out59p0));

// ColorUniform:64
	vec3 n_out64p0 = Color_B.rgb;
	float n_out64p1 = Color_B.a;

// VectorUniform:67
	vec3 n_out67p0 = UVScale_B;

// VectorOp:68
	vec3 n_out68p0 = n_out7p0 * n_out67p0;

// TextureUniform:66
	vec3 n_out66p0;
	float n_out66p1;
	{
		vec4 n_tex_read = texture(Albedo_B, n_out68p0.xy);
		n_out66p0 = n_tex_read.rgb;
		n_out66p1 = n_tex_read.a;
	}

// VectorOp:65
	vec3 n_out65p0 = n_out64p0 * n_out66p0;

// ColorUniform:71
	vec3 n_out71p0 = Color_B_Alt.rgb;
	float n_out71p1 = Color_B_Alt.a;

// VectorOp:72
	vec3 n_out72p0 = n_out66p0 * n_out71p0;

// VectorMix:75
	vec3 n_out75p0 = mix(n_out65p0, n_out72p0, vec3(n_out59p0));

// Vector:83
	vec3 n_out83p0 = vec3(0.000000, 0.000000, 1.000000);

// Input:84
	vec3 n_out84p0 = NORMAL;

// DotProduct:85
	float n_out85p0 = dot(n_out83p0, n_out84p0);

// ScalarUniform:88
	float n_out88p0 = Slope;

// ScalarOp:86
	float n_out86p0 = pow(n_out85p0, n_out88p0);

// ScalarUniform:89
	float n_out89p0 = Slope_Mult;

// ScalarOp:87
	float n_out87p0 = n_out86p0 * n_out89p0;

// VectorMix:78
	vec3 n_out78p0 = mix(n_out18p0, n_out75p0, vec3(n_out87p0));

// ColorUniform:15
	vec3 n_out15p0 = Color_C.rgb;
	float n_out15p1 = Color_C.a;

// VectorUniform:9
	vec3 n_out9p0 = UVScale_C;

// VectorOp:11
	vec3 n_out11p0 = n_out7p0 * n_out9p0;

// TextureUniform:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 n_tex_read = texture(Albedo_C, n_out11p0.xy);
		n_out13p0 = n_tex_read.rgb;
		n_out13p1 = n_tex_read.a;
	}

// VectorOp:17
	vec3 n_out17p0 = n_out15p0 * n_out13p0;

// ColorUniform:73
	vec3 n_out73p0 = Color_C_Alt.rgb;
	float n_out73p1 = Color_C_Alt.a;

// VectorOp:74
	vec3 n_out74p0 = n_out13p0 * n_out73p0;

// VectorMix:76
	vec3 n_out76p0 = mix(n_out17p0, n_out74p0, vec3(n_out59p0));

// VectorMix:79
	vec3 n_in79p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out79p0 = mix(n_out78p0, n_out76p0, n_in79p2);

// ScalarUniform:27
	float n_out27p0 = Metallic_A;

// ScalarUniform:28
	float n_out28p0 = Metallic_B;

// ScalarMix:25
	float n_out25p0 = mix(n_out27p0, n_out28p0, n_out87p0);

// ScalarUniform:91
	float n_out91p0 = Metallic_C;

// ScalarMix:94
	float n_in94p2 = 0.50000;
	float n_out94p0 = mix(n_out25p0, n_out91p0, n_in94p2);

// ScalarClamp:48
	float n_in48p1 = 0.00000;
	float n_in48p2 = 1.00000;
	float n_out48p0 = clamp(n_out94p0, n_in48p1, n_in48p2);

// TextureUniform:20
	vec3 n_out20p0;
	float n_out20p1;
	{
		vec4 n_tex_read = texture(Rough_A, n_out10p0.xy);
		n_out20p0 = n_tex_read.rgb;
		n_out20p1 = n_tex_read.a;
	}

// VectorDecompose:22
	float n_out22p0 = n_out20p0.x;
	float n_out22p1 = n_out20p0.y;
	float n_out22p2 = n_out20p0.z;

// ScalarUniform:56
	float n_out56p0 = Rough_Mult_A;

// ScalarOp:54
	float n_out54p0 = n_out22p0 * n_out56p0;

// TextureUniform:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 n_tex_read = texture(Rough_B, n_out68p0.xy);
		n_out21p0 = n_tex_read.rgb;
		n_out21p1 = n_tex_read.a;
	}

// VectorDecompose:23
	float n_out23p0 = n_out21p0.x;
	float n_out23p1 = n_out21p0.y;
	float n_out23p2 = n_out21p0.z;

// ScalarUniform:57
	float n_out57p0 = Rough_Mult_B;

// ScalarOp:55
	float n_out55p0 = n_out23p0 * n_out57p0;

// ScalarMix:19
	float n_out19p0 = mix(n_out54p0, n_out55p0, n_out59p0);

// ScalarClamp:47
	float n_in47p1 = 0.00000;
	float n_in47p2 = 1.00000;
	float n_out47p0 = clamp(n_out19p0, n_in47p1, n_in47p2);

// ScalarUniform:29
	float n_out29p0 = Specular_A;

// ScalarUniform:30
	float n_out30p0 = Specular_B;

// ScalarMix:26
	float n_out26p0 = mix(n_out29p0, n_out30p0, n_out87p0);

// ScalarUniform:92
	float n_out92p0 = Specular_C;

// ScalarMix:93
	float n_in93p2 = 0.50000;
	float n_out93p0 = mix(n_out26p0, n_out92p0, n_in93p2);

// ScalarClamp:49
	float n_in49p1 = 0.00000;
	float n_in49p2 = 1.00000;
	float n_out49p0 = clamp(n_out93p0, n_in49p1, n_in49p2);

// ColorUniform:81
	vec3 n_out81p0 = Fresnel_Color.rgb;
	float n_out81p1 = Fresnel_Color.a;

// ScalarUniform:62
	float n_out62p0 = Fresnel_Power;

// Fresnel:61
	bool n_in61p2 = false;
	float n_out61p0 = n_in61p2 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_out62p0)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_out62p0));

// VectorMix:90
	vec3 n_in90p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out90p0 = mix(n_out81p0, n_in90p1, vec3(n_out61p0));

// VectorMix:80
	vec3 n_in80p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out80p0 = mix(n_out90p0, n_in80p1, vec3(n_out87p0));

// VectorMix:95
	vec3 n_in95p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in95p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out95p0 = mix(n_out80p0, n_in95p1, n_in95p2);

// TextureUniform:31
	vec3 n_out31p0;
	float n_out31p1;
	{
		vec4 n_tex_read = texture(NormalMap_A, n_out10p0.xy);
		n_out31p0 = n_tex_read.rgb;
		n_out31p1 = n_tex_read.a;
	}

// TextureUniform:32
	vec3 n_out32p0;
	float n_out32p1;
	{
		vec4 n_tex_read = texture(NormalMap_B, n_out68p0.xy);
		n_out32p0 = n_tex_read.rgb;
		n_out32p1 = n_tex_read.a;
	}

// VectorMix:33
	vec3 n_out33p0 = mix(n_out31p0, n_out32p0, vec3(n_out87p0));

// TextureUniform:96
	vec3 n_out96p0;
	float n_out96p1;
	{
		vec4 n_tex_read = texture(NormalMap_C, n_out11p0.xy);
		n_out96p0 = n_tex_read.rgb;
		n_out96p1 = n_tex_read.a;
	}

// VectorMix:97
	vec3 n_in97p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out97p0 = mix(n_out33p0, n_out96p0, n_in97p2);

// Output:0
	ALBEDO = n_out79p0;
	METALLIC = n_out48p0;
	ROUGHNESS = n_out47p0;
	SPECULAR = n_out49p0;
	EMISSION = n_out95p0;
	NORMALMAP = n_out97p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1515, -181 )
nodes/fragment/0/position = Vector2( 200, 200 )
nodes/fragment/7/node = SubResource( 58 )
nodes/fragment/7/position = Vector2( -2000, 140 )
nodes/fragment/8/node = SubResource( 69 )
nodes/fragment/8/position = Vector2( -2000, -400 )
nodes/fragment/9/node = SubResource( 70 )
nodes/fragment/9/position = Vector2( -2000, 0 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1800, -400 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1800, 0 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1200, -1500 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -1200, -700 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -1200, -1600 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -1200, -800 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -1000, -1520 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -1000, -720 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( -800, -1520 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( -400, 880 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( -1200, 800 )
nodes/fragment/21/node = SubResource( 12 )
nodes/fragment/21/position = Vector2( -1200, 1000 )
nodes/fragment/22/node = SubResource( 13 )
nodes/fragment/22/position = Vector2( -1000, 880 )
nodes/fragment/23/node = SubResource( 14 )
nodes/fragment/23/position = Vector2( -1000, 1080 )
nodes/fragment/24/node = SubResource( 15 )
nodes/fragment/24/position = Vector2( -400, 1000 )
nodes/fragment/25/node = SubResource( 16 )
nodes/fragment/25/position = Vector2( -800, 200 )
nodes/fragment/26/node = SubResource( 17 )
nodes/fragment/26/position = Vector2( -800, 320 )
nodes/fragment/27/node = SubResource( 18 )
nodes/fragment/27/position = Vector2( -1000, 200 )
nodes/fragment/28/node = SubResource( 19 )
nodes/fragment/28/position = Vector2( -1000, 260 )
nodes/fragment/29/node = SubResource( 20 )
nodes/fragment/29/position = Vector2( -1000, 340 )
nodes/fragment/30/node = SubResource( 21 )
nodes/fragment/30/position = Vector2( -1000, 400 )
nodes/fragment/31/node = SubResource( 22 )
nodes/fragment/31/position = Vector2( -1200, 1400 )
nodes/fragment/32/node = SubResource( 23 )
nodes/fragment/32/position = Vector2( -1200, 1600 )
nodes/fragment/33/node = SubResource( 24 )
nodes/fragment/33/position = Vector2( -600, 1480 )
nodes/fragment/34/node = SubResource( 25 )
nodes/fragment/34/position = Vector2( -3200, 800 )
nodes/fragment/36/node = SubResource( 26 )
nodes/fragment/36/position = Vector2( -3600, 800 )
nodes/fragment/37/node = SubResource( 27 )
nodes/fragment/37/position = Vector2( -3600, 940 )
nodes/fragment/38/node = SubResource( 28 )
nodes/fragment/38/position = Vector2( -3400, 800 )
nodes/fragment/39/node = SubResource( 29 )
nodes/fragment/39/position = Vector2( -3000, 880 )
nodes/fragment/40/node = SubResource( 30 )
nodes/fragment/40/position = Vector2( -2680, 800 )
nodes/fragment/41/node = SubResource( 31 )
nodes/fragment/41/position = Vector2( -3000, 800 )
nodes/fragment/42/node = SubResource( 32 )
nodes/fragment/42/position = Vector2( -2200, 800 )
nodes/fragment/43/node = SubResource( 33 )
nodes/fragment/43/position = Vector2( -2400, 800 )
nodes/fragment/44/node = SubResource( 34 )
nodes/fragment/44/position = Vector2( -2000, 880 )
nodes/fragment/47/node = SubResource( 35 )
nodes/fragment/47/position = Vector2( -200, 880 )
nodes/fragment/48/node = SubResource( 36 )
nodes/fragment/48/position = Vector2( -200, 200 )
nodes/fragment/49/node = SubResource( 37 )
nodes/fragment/49/position = Vector2( -200, 320 )
nodes/fragment/50/node = SubResource( 38 )
nodes/fragment/50/position = Vector2( -2680, 1000 )
nodes/fragment/51/node = SubResource( 39 )
nodes/fragment/51/position = Vector2( -3000, 1000 )
nodes/fragment/52/node = SubResource( 40 )
nodes/fragment/52/position = Vector2( -2400, 900 )
nodes/fragment/53/node = SubResource( 41 )
nodes/fragment/53/position = Vector2( -3000, 1060 )
nodes/fragment/54/node = SubResource( 42 )
nodes/fragment/54/position = Vector2( -600, 860 )
nodes/fragment/55/node = SubResource( 43 )
nodes/fragment/55/position = Vector2( -600, 1040 )
nodes/fragment/56/node = SubResource( 44 )
nodes/fragment/56/position = Vector2( -800, 1000 )
nodes/fragment/57/node = SubResource( 45 )
nodes/fragment/57/position = Vector2( -800, 1200 )
nodes/fragment/58/node = SubResource( 46 )
nodes/fragment/58/position = Vector2( -1800, 940 )
nodes/fragment/59/node = SubResource( 47 )
nodes/fragment/59/position = Vector2( -1600, 800 )
nodes/fragment/60/node = SubResource( 48 )
nodes/fragment/60/position = Vector2( -2000, 800 )
nodes/fragment/61/node = SubResource( 49 )
nodes/fragment/61/position = Vector2( -1000, -100 )
nodes/fragment/62/node = SubResource( 50 )
nodes/fragment/62/position = Vector2( -1180, -40 )
nodes/fragment/64/node = SubResource( 52 )
nodes/fragment/64/position = Vector2( -1200, -1200 )
nodes/fragment/65/node = SubResource( 53 )
nodes/fragment/65/position = Vector2( -1000, -1120 )
nodes/fragment/66/node = SubResource( 54 )
nodes/fragment/66/position = Vector2( -1200, -1100 )
nodes/fragment/67/node = SubResource( 55 )
nodes/fragment/67/position = Vector2( -2000, -200 )
nodes/fragment/68/node = SubResource( 56 )
nodes/fragment/68/position = Vector2( -1800, -200 )
nodes/fragment/69/node = SubResource( 57 )
nodes/fragment/69/position = Vector2( -1200, -1320 )
nodes/fragment/70/node = SubResource( 59 )
nodes/fragment/70/position = Vector2( -1000, -1320 )
nodes/fragment/71/node = SubResource( 60 )
nodes/fragment/71/position = Vector2( -1200, -920 )
nodes/fragment/72/node = SubResource( 61 )
nodes/fragment/72/position = Vector2( -1000, -920 )
nodes/fragment/73/node = SubResource( 62 )
nodes/fragment/73/position = Vector2( -1200, -520 )
nodes/fragment/74/node = SubResource( 63 )
nodes/fragment/74/position = Vector2( -1000, -520 )
nodes/fragment/75/node = SubResource( 64 )
nodes/fragment/75/position = Vector2( -800, -1120 )
nodes/fragment/76/node = SubResource( 65 )
nodes/fragment/76/position = Vector2( -800, -720 )
nodes/fragment/77/node = SubResource( 66 )
nodes/fragment/77/position = Vector2( -1200, 1200 )
nodes/fragment/78/node = SubResource( 67 )
nodes/fragment/78/position = Vector2( -600, -1240 )
nodes/fragment/79/node = SubResource( 68 )
nodes/fragment/79/position = Vector2( -400, -1000 )
nodes/fragment/80/node = SubResource( 71 )
nodes/fragment/80/position = Vector2( -400, -200 )
nodes/fragment/81/node = SubResource( 72 )
nodes/fragment/81/position = Vector2( -1000, -200 )
nodes/fragment/83/node = SubResource( 73 )
nodes/fragment/83/position = Vector2( -2600, 400 )
nodes/fragment/84/node = SubResource( 74 )
nodes/fragment/84/position = Vector2( -2400, 500 )
nodes/fragment/85/node = SubResource( 75 )
nodes/fragment/85/position = Vector2( -2200, 400 )
nodes/fragment/86/node = SubResource( 76 )
nodes/fragment/86/position = Vector2( -2000, 400 )
nodes/fragment/87/node = SubResource( 77 )
nodes/fragment/87/position = Vector2( -1820, 400 )
nodes/fragment/88/node = SubResource( 78 )
nodes/fragment/88/position = Vector2( -2200, 500 )
nodes/fragment/89/node = SubResource( 79 )
nodes/fragment/89/position = Vector2( -2000, 500 )
nodes/fragment/90/node = SubResource( 80 )
nodes/fragment/90/position = Vector2( -600, -200 )
nodes/fragment/91/node = SubResource( 81 )
nodes/fragment/91/position = Vector2( -600, 240 )
nodes/fragment/92/node = SubResource( 82 )
nodes/fragment/92/position = Vector2( -600, 360 )
nodes/fragment/93/node = SubResource( 83 )
nodes/fragment/93/position = Vector2( -400, 320 )
nodes/fragment/94/node = SubResource( 84 )
nodes/fragment/94/position = Vector2( -400, 200 )
nodes/fragment/95/node = SubResource( 85 )
nodes/fragment/95/position = Vector2( -200, -200 )
nodes/fragment/96/node = SubResource( 86 )
nodes/fragment/96/position = Vector2( -1200, 1800 )
nodes/fragment/97/node = SubResource( 87 )
nodes/fragment/97/position = Vector2( -400, 1480 )
nodes/fragment/connections = PoolIntArray( 7, 0, 10, 0, 8, 0, 10, 1, 7, 0, 11, 0, 9, 0, 11, 1, 10, 0, 12, 0, 11, 0, 13, 0, 12, 0, 16, 1, 14, 0, 16, 0, 16, 0, 18, 0, 10, 0, 20, 0, 20, 0, 22, 0, 21, 0, 23, 0, 22, 1, 24, 0, 23, 1, 24, 1, 27, 0, 25, 0, 28, 0, 25, 1, 30, 0, 26, 1, 31, 0, 33, 0, 32, 0, 33, 1, 36, 0, 38, 0, 37, 0, 38, 1, 38, 0, 34, 0, 34, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 19, 0, 47, 0, 47, 0, 0, 3, 48, 0, 0, 2, 49, 0, 0, 4, 34, 1, 50, 1, 39, 2, 50, 2, 39, 0, 40, 2, 39, 1, 40, 1, 51, 0, 50, 0, 50, 0, 52, 1, 40, 0, 52, 2, 53, 0, 52, 0, 52, 0, 42, 1, 43, 0, 42, 0, 22, 0, 54, 0, 54, 0, 19, 0, 23, 0, 55, 0, 55, 0, 19, 1, 56, 0, 54, 1, 57, 0, 55, 1, 60, 0, 59, 0, 58, 0, 59, 1, 44, 0, 59, 2, 44, 0, 58, 0, 29, 0, 26, 0, 59, 0, 19, 2, 59, 0, 24, 2, 59, 0, 18, 2, 62, 0, 61, 3, 66, 0, 65, 1, 64, 0, 65, 0, 67, 0, 68, 1, 7, 0, 68, 0, 68, 0, 66, 0, 15, 0, 17, 0, 13, 0, 17, 1, 12, 0, 70, 0, 69, 0, 70, 1, 66, 0, 72, 0, 71, 0, 72, 1, 13, 0, 74, 0, 73, 0, 74, 1, 70, 0, 18, 1, 65, 0, 75, 0, 72, 0, 75, 1, 59, 0, 75, 2, 17, 0, 76, 0, 74, 0, 76, 1, 59, 0, 76, 2, 18, 0, 78, 0, 75, 0, 78, 1, 78, 0, 79, 0, 76, 0, 79, 1, 79, 0, 0, 0, 84, 0, 85, 1, 83, 0, 85, 0, 85, 0, 86, 0, 86, 0, 87, 0, 88, 0, 86, 1, 89, 0, 87, 1, 87, 0, 78, 2, 87, 0, 80, 2, 90, 0, 80, 0, 81, 0, 90, 0, 61, 0, 90, 2, 87, 0, 25, 2, 87, 0, 26, 2, 91, 0, 94, 1, 92, 0, 93, 1, 26, 0, 93, 0, 25, 0, 94, 0, 94, 0, 48, 0, 93, 0, 49, 0, 80, 0, 95, 0, 95, 0, 0, 5, 11, 0, 77, 0, 68, 0, 21, 0, 10, 0, 31, 0, 68, 0, 32, 0, 11, 0, 96, 0, 87, 0, 33, 2, 33, 0, 97, 0, 96, 0, 97, 1, 97, 0, 0, 8 )
